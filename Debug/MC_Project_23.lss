
MC_Project_23.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00002c68  00002cfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800184  00800184  00002e20  2**0
                  ALLOC
  3 .stab         00001ddc  00000000  00000000  00002e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d16  00000000  00000000  00004bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005912  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000080af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009435  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a60c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a7cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000aac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <main>
      8a:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 25 13 	jmp	0x264a	; 0x264a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 57       	subi	r30, 0x7D	; 125
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Uart_init>:
 * UART.c
 */
#include "UART.h"

void Uart_init(long BaudRate)
{
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	00 d0       	rcall	.+0      	; 0xe38 <Uart_init+0xa>
     e38:	00 d0       	rcall	.+0      	; 0xe3a <Uart_init+0xc>
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	69 83       	std	Y+1, r22	; 0x01
     e40:	7a 83       	std	Y+2, r23	; 0x02
     e42:	8b 83       	std	Y+3, r24	; 0x03
     e44:	9c 83       	std	Y+4, r25	; 0x04
    UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);
     e46:	ea e2       	ldi	r30, 0x2A	; 42
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	88 ed       	ldi	r24, 0xD8	; 216
     e4c:	80 83       	st	Z, r24
    UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
     e4e:	e0 e4       	ldi	r30, 0x40	; 64
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	86 e8       	ldi	r24, 0x86	; 134
     e54:	80 83       	st	Z, r24

    UBRRL=(unsigned char)(((F_CPU)/(16*BaudRate))-1);
     e56:	09 e2       	ldi	r16, 0x29	; 41
     e58:	10 e0       	ldi	r17, 0x00	; 0
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	ab 81       	ldd	r26, Y+3	; 0x03
     e60:	bc 81       	ldd	r27, Y+4	; 0x04
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	aa 1f       	adc	r26, r26
     e68:	bb 1f       	adc	r27, r27
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	aa 1f       	adc	r26, r26
     e70:	bb 1f       	adc	r27, r27
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	aa 1f       	adc	r26, r26
     e78:	bb 1f       	adc	r27, r27
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	aa 1f       	adc	r26, r26
     e80:	bb 1f       	adc	r27, r27
     e82:	9c 01       	movw	r18, r24
     e84:	ad 01       	movw	r20, r26
     e86:	80 e4       	ldi	r24, 0x40	; 64
     e88:	92 e4       	ldi	r25, 0x42	; 66
     e8a:	af e0       	ldi	r26, 0x0F	; 15
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	bc 01       	movw	r22, r24
     e90:	cd 01       	movw	r24, r26
     e92:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__udivmodsi4>
     e96:	da 01       	movw	r26, r20
     e98:	c9 01       	movw	r24, r18
     e9a:	81 50       	subi	r24, 0x01	; 1
     e9c:	f8 01       	movw	r30, r16
     e9e:	80 83       	st	Z, r24
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <UART_recieve_byte>:

char  UART_recieve_byte(void)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	while((UCSRA & (1<<RXC)) ==0);
     eba:	eb e2       	ldi	r30, 0x2B	; 43
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	88 23       	and	r24, r24
     ec2:	dc f7       	brge	.-10     	; 0xeba <UART_recieve_byte+0x8>

	return UDR ;
     ec4:	ec e2       	ldi	r30, 0x2C	; 44
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z


}
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <pwm_init>:
 */
#include"PWM.h"

#define PWM_PIN     PB3

void pwm_init() {
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
	 /*
	 Set fast PWM mode with non
	 inverting output
	 */
	TCCR0|=(1<<COM01)|(1<<WGM00)|(1<<WGM01);
     ed8:	a3 e5       	ldi	r26, 0x53	; 83
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e3 e5       	ldi	r30, 0x53	; 83
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 66       	ori	r24, 0x68	; 104
     ee4:	8c 93       	st	X, r24
    //TCCR1A |= (1 << WGM10) | (1 << COM1B1); // Fast PWM mode, non-inverting output on OC1A
    //TCCR1B |= (1 << WGM12) | (1 << CS11); // Fast PWM, prescaler = 8
	//select 1:1 prescaler
	TCCR0|=(1<<CS00);
     ee6:	a3 e5       	ldi	r26, 0x53	; 83
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e3 e5       	ldi	r30, 0x53	; 83
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	8c 93       	st	X, r24
    DDRB |= (1 << PWM_PIN); // Set PWM pin as output
     ef4:	a7 e3       	ldi	r26, 0x37	; 55
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e7 e3       	ldi	r30, 0x37	; 55
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	88 60       	ori	r24, 0x08	; 8
     f00:	8c 93       	st	X, r24
}
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <set_pwm_duty_cycle>:

// Function to set PWM duty cycle
void set_pwm_duty_cycle(uint8_t duty_cycle) {
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	0f 92       	push	r0
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = duty_cycle;
     f14:	ec e5       	ldi	r30, 0x5C	; 92
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	80 83       	st	Z, r24
}
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <LCD_Init>:
 */
#include "Lcd.h"

/*LCD initialization & clearing*/
void LCD_Init(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	2e 97       	sbiw	r28, 0x0e	; 14
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
	LCD_CTRL_PORT_DIR_RS |=(1<<RS);
     f38:	aa e3       	ldi	r26, 0x3A	; 58
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ea e3       	ldi	r30, 0x3A	; 58
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	8c 93       	st	X, r24
	LCD_CTRL_PORT_DIR_E  |=(1<<E);
     f46:	aa e3       	ldi	r26, 0x3A	; 58
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ea e3       	ldi	r30, 0x3A	; 58
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	84 60       	ori	r24, 0x04	; 4
     f52:	8c 93       	st	X, r24

#if LCD_BIT_MODE  == 4
	LCD_DATA_PORT_DIR |=0x78;
     f54:	aa e3       	ldi	r26, 0x3A	; 58
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ea e3       	ldi	r30, 0x3A	; 58
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 67       	ori	r24, 0x78	; 120
     f60:	8c 93       	st	X, r24
	LCD_Send_Command(ReturnHome);
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_Send_Command>
	LCD_Send_Command(_4BIT_2LINE);
     f68:	88 e2       	ldi	r24, 0x28	; 40
     f6a:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_Send_Command>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a0 e8       	ldi	r26, 0x80	; 128
     f74:	bf e3       	ldi	r27, 0x3F	; 63
     f76:	8b 87       	std	Y+11, r24	; 0x0b
     f78:	9c 87       	std	Y+12, r25	; 0x0c
     f7a:	ad 87       	std	Y+13, r26	; 0x0d
     f7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f80:	7c 85       	ldd	r23, Y+12	; 0x0c
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	4a e7       	ldi	r20, 0x7A	; 122
     f8c:	53 e4       	ldi	r21, 0x43	; 67
     f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	8f 83       	std	Y+7, r24	; 0x07
     f98:	98 87       	std	Y+8, r25	; 0x08
     f9a:	a9 87       	std	Y+9, r26	; 0x09
     f9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f9e:	6f 81       	ldd	r22, Y+7	; 0x07
     fa0:	78 85       	ldd	r23, Y+8	; 0x08
     fa2:	89 85       	ldd	r24, Y+9	; 0x09
     fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	5f e3       	ldi	r21, 0x3F	; 63
     fae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fb2:	88 23       	and	r24, r24
     fb4:	2c f4       	brge	.+10     	; 0xfc0 <LCD_Init+0x9c>
		__ticks = 1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9e 83       	std	Y+6, r25	; 0x06
     fbc:	8d 83       	std	Y+5, r24	; 0x05
     fbe:	3f c0       	rjmp	.+126    	; 0x103e <LCD_Init+0x11a>
	else if (__tmp > 65535)
     fc0:	6f 81       	ldd	r22, Y+7	; 0x07
     fc2:	78 85       	ldd	r23, Y+8	; 0x08
     fc4:	89 85       	ldd	r24, Y+9	; 0x09
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	3f ef       	ldi	r19, 0xFF	; 255
     fcc:	4f e7       	ldi	r20, 0x7F	; 127
     fce:	57 e4       	ldi	r21, 0x47	; 71
     fd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fd4:	18 16       	cp	r1, r24
     fd6:	4c f5       	brge	.+82     	; 0x102a <LCD_Init+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     fda:	7c 85       	ldd	r23, Y+12	; 0x0c
     fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fde:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e2       	ldi	r20, 0x20	; 32
     fe6:	51 e4       	ldi	r21, 0x41	; 65
     fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	9e 83       	std	Y+6, r25	; 0x06
     ffe:	8d 83       	std	Y+5, r24	; 0x05
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <LCD_Init+0xfc>
    1002:	89 e1       	ldi	r24, 0x19	; 25
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9c 83       	std	Y+4, r25	; 0x04
    1008:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <LCD_Init+0xea>
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	9e 83       	std	Y+6, r25	; 0x06
    101e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1020:	8d 81       	ldd	r24, Y+5	; 0x05
    1022:	9e 81       	ldd	r25, Y+6	; 0x06
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	69 f7       	brne	.-38     	; 0x1002 <LCD_Init+0xde>
    1028:	14 c0       	rjmp	.+40     	; 0x1052 <LCD_Init+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102a:	6f 81       	ldd	r22, Y+7	; 0x07
    102c:	78 85       	ldd	r23, Y+8	; 0x08
    102e:	89 85       	ldd	r24, Y+9	; 0x09
    1030:	9a 85       	ldd	r25, Y+10	; 0x0a
    1032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9e 83       	std	Y+6, r25	; 0x06
    103c:	8d 83       	std	Y+5, r24	; 0x05
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <LCD_Init+0x126>
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT_DIR=0xff;
	LCD_Send_Command(ReturnHome);
	LCD_Send_Command(_8BIT_2LINE);
#endif
	_delay_ms(1);
	LCD_Send_Command(CLEAR_DISPLAY);
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_Send_Command>
	LCD_Send_Command(DISPLAY_ON_CURSOR_OFF);
    1058:	8c e0       	ldi	r24, 0x0C	; 12
    105a:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_Send_Command>
}
    105e:	2e 96       	adiw	r28, 0x0e	; 14
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <LCD_Send_Command>:

/*Sending A command to the LCD */
void LCD_Send_Command(unsigned char command)
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	c7 54       	subi	r28, 0x47	; 71
    107e:	d0 40       	sbci	r29, 0x00	; 0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	fe 01       	movw	r30, r28
    108c:	e9 5b       	subi	r30, 0xB9	; 185
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	80 83       	st	Z, r24
	LCD_CTRL_PORT_E &=~(1<<E);
	_delay_ms(1);

	/*LCD as 8bit mode*/
#elif LCD_BIT_MODE == 4
	LCD_CTRL_PORT_RS &=~(1<<RS); // command mode
    1092:	ab e3       	ldi	r26, 0x3B	; 59
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	eb e3       	ldi	r30, 0x3B	; 59
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8d 7f       	andi	r24, 0xFD	; 253
    109e:	8c 93       	st	X, r24
    10a0:	fe 01       	movw	r30, r28
    10a2:	ed 5b       	subi	r30, 0xBD	; 189
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a0 e8       	ldi	r26, 0x80	; 128
    10ac:	bf e3       	ldi	r27, 0x3F	; 63
    10ae:	80 83       	st	Z, r24
    10b0:	91 83       	std	Z+1, r25	; 0x01
    10b2:	a2 83       	std	Z+2, r26	; 0x02
    10b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b6:	8e 01       	movw	r16, r28
    10b8:	01 5c       	subi	r16, 0xC1	; 193
    10ba:	1f 4f       	sbci	r17, 0xFF	; 255
    10bc:	fe 01       	movw	r30, r28
    10be:	ed 5b       	subi	r30, 0xBD	; 189
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	60 81       	ld	r22, Z
    10c4:	71 81       	ldd	r23, Z+1	; 0x01
    10c6:	82 81       	ldd	r24, Z+2	; 0x02
    10c8:	93 81       	ldd	r25, Z+3	; 0x03
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	4a e7       	ldi	r20, 0x7A	; 122
    10d0:	53 e4       	ldi	r21, 0x43	; 67
    10d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	f8 01       	movw	r30, r16
    10dc:	80 83       	st	Z, r24
    10de:	91 83       	std	Z+1, r25	; 0x01
    10e0:	a2 83       	std	Z+2, r26	; 0x02
    10e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10e4:	fe 01       	movw	r30, r28
    10e6:	ff 96       	adiw	r30, 0x3f	; 63
    10e8:	60 81       	ld	r22, Z
    10ea:	71 81       	ldd	r23, Z+1	; 0x01
    10ec:	82 81       	ldd	r24, Z+2	; 0x02
    10ee:	93 81       	ldd	r25, Z+3	; 0x03
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e8       	ldi	r20, 0x80	; 128
    10f6:	5f e3       	ldi	r21, 0x3F	; 63
    10f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10fc:	88 23       	and	r24, r24
    10fe:	2c f4       	brge	.+10     	; 0x110a <LCD_Send_Command+0x9a>
		__ticks = 1;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	9e af       	std	Y+62, r25	; 0x3e
    1106:	8d af       	std	Y+61, r24	; 0x3d
    1108:	46 c0       	rjmp	.+140    	; 0x1196 <LCD_Send_Command+0x126>
	else if (__tmp > 65535)
    110a:	fe 01       	movw	r30, r28
    110c:	ff 96       	adiw	r30, 0x3f	; 63
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	93 81       	ldd	r25, Z+3	; 0x03
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	3f ef       	ldi	r19, 0xFF	; 255
    111a:	4f e7       	ldi	r20, 0x7F	; 127
    111c:	57 e4       	ldi	r21, 0x47	; 71
    111e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1122:	18 16       	cp	r1, r24
    1124:	64 f5       	brge	.+88     	; 0x117e <LCD_Send_Command+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1126:	fe 01       	movw	r30, r28
    1128:	ed 5b       	subi	r30, 0xBD	; 189
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e2       	ldi	r20, 0x20	; 32
    113a:	51 e4       	ldi	r21, 0x41	; 65
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9e af       	std	Y+62, r25	; 0x3e
    1152:	8d af       	std	Y+61, r24	; 0x3d
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <LCD_Send_Command+0x104>
    1156:	89 e1       	ldi	r24, 0x19	; 25
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	9c af       	std	Y+60, r25	; 0x3c
    115c:	8b af       	std	Y+59, r24	; 0x3b
    115e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1160:	9c ad       	ldd	r25, Y+60	; 0x3c
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <LCD_Send_Command+0xf2>
    1166:	9c af       	std	Y+60, r25	; 0x3c
    1168:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116a:	8d ad       	ldd	r24, Y+61	; 0x3d
    116c:	9e ad       	ldd	r25, Y+62	; 0x3e
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9e af       	std	Y+62, r25	; 0x3e
    1172:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1174:	8d ad       	ldd	r24, Y+61	; 0x3d
    1176:	9e ad       	ldd	r25, Y+62	; 0x3e
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	69 f7       	brne	.-38     	; 0x1156 <LCD_Send_Command+0xe6>
    117c:	16 c0       	rjmp	.+44     	; 0x11aa <LCD_Send_Command+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117e:	fe 01       	movw	r30, r28
    1180:	ff 96       	adiw	r30, 0x3f	; 63
    1182:	60 81       	ld	r22, Z
    1184:	71 81       	ldd	r23, Z+1	; 0x01
    1186:	82 81       	ldd	r24, Z+2	; 0x02
    1188:	93 81       	ldd	r25, Z+3	; 0x03
    118a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9e af       	std	Y+62, r25	; 0x3e
    1194:	8d af       	std	Y+61, r24	; 0x3d
    1196:	8d ad       	ldd	r24, Y+61	; 0x3d
    1198:	9e ad       	ldd	r25, Y+62	; 0x3e
    119a:	9a af       	std	Y+58, r25	; 0x3a
    119c:	89 af       	std	Y+57, r24	; 0x39
    119e:	89 ad       	ldd	r24, Y+57	; 0x39
    11a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <LCD_Send_Command+0x132>
    11a6:	9a af       	std	Y+58, r25	; 0x3a
    11a8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_CTRL_PORT_E |=(1<<E);
    11aa:	ab e3       	ldi	r26, 0x3B	; 59
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	eb e3       	ldi	r30, 0x3B	; 59
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	84 60       	ori	r24, 0x04	; 4
    11b6:	8c 93       	st	X, r24
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a0 e8       	ldi	r26, 0x80	; 128
    11be:	bf e3       	ldi	r27, 0x3F	; 63
    11c0:	8d ab       	std	Y+53, r24	; 0x35
    11c2:	9e ab       	std	Y+54, r25	; 0x36
    11c4:	af ab       	std	Y+55, r26	; 0x37
    11c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c8:	6d a9       	ldd	r22, Y+53	; 0x35
    11ca:	7e a9       	ldd	r23, Y+54	; 0x36
    11cc:	8f a9       	ldd	r24, Y+55	; 0x37
    11ce:	98 ad       	ldd	r25, Y+56	; 0x38
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	4a e7       	ldi	r20, 0x7A	; 122
    11d6:	53 e4       	ldi	r21, 0x43	; 67
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	89 ab       	std	Y+49, r24	; 0x31
    11e2:	9a ab       	std	Y+50, r25	; 0x32
    11e4:	ab ab       	std	Y+51, r26	; 0x33
    11e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11e8:	69 a9       	ldd	r22, Y+49	; 0x31
    11ea:	7a a9       	ldd	r23, Y+50	; 0x32
    11ec:	8b a9       	ldd	r24, Y+51	; 0x33
    11ee:	9c a9       	ldd	r25, Y+52	; 0x34
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e8       	ldi	r20, 0x80	; 128
    11f6:	5f e3       	ldi	r21, 0x3F	; 63
    11f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11fc:	88 23       	and	r24, r24
    11fe:	2c f4       	brge	.+10     	; 0x120a <LCD_Send_Command+0x19a>
		__ticks = 1;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	98 ab       	std	Y+48, r25	; 0x30
    1206:	8f a7       	std	Y+47, r24	; 0x2f
    1208:	3f c0       	rjmp	.+126    	; 0x1288 <LCD_Send_Command+0x218>
	else if (__tmp > 65535)
    120a:	69 a9       	ldd	r22, Y+49	; 0x31
    120c:	7a a9       	ldd	r23, Y+50	; 0x32
    120e:	8b a9       	ldd	r24, Y+51	; 0x33
    1210:	9c a9       	ldd	r25, Y+52	; 0x34
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	4f e7       	ldi	r20, 0x7F	; 127
    1218:	57 e4       	ldi	r21, 0x47	; 71
    121a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    121e:	18 16       	cp	r1, r24
    1220:	4c f5       	brge	.+82     	; 0x1274 <LCD_Send_Command+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1222:	6d a9       	ldd	r22, Y+53	; 0x35
    1224:	7e a9       	ldd	r23, Y+54	; 0x36
    1226:	8f a9       	ldd	r24, Y+55	; 0x37
    1228:	98 ad       	ldd	r25, Y+56	; 0x38
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e2       	ldi	r20, 0x20	; 32
    1230:	51 e4       	ldi	r21, 0x41	; 65
    1232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	bc 01       	movw	r22, r24
    123c:	cd 01       	movw	r24, r26
    123e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	98 ab       	std	Y+48, r25	; 0x30
    1248:	8f a7       	std	Y+47, r24	; 0x2f
    124a:	0f c0       	rjmp	.+30     	; 0x126a <LCD_Send_Command+0x1fa>
    124c:	89 e1       	ldi	r24, 0x19	; 25
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9e a7       	std	Y+46, r25	; 0x2e
    1252:	8d a7       	std	Y+45, r24	; 0x2d
    1254:	8d a5       	ldd	r24, Y+45	; 0x2d
    1256:	9e a5       	ldd	r25, Y+46	; 0x2e
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <LCD_Send_Command+0x1e8>
    125c:	9e a7       	std	Y+46, r25	; 0x2e
    125e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1260:	8f a5       	ldd	r24, Y+47	; 0x2f
    1262:	98 a9       	ldd	r25, Y+48	; 0x30
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	98 ab       	std	Y+48, r25	; 0x30
    1268:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126a:	8f a5       	ldd	r24, Y+47	; 0x2f
    126c:	98 a9       	ldd	r25, Y+48	; 0x30
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	69 f7       	brne	.-38     	; 0x124c <LCD_Send_Command+0x1dc>
    1272:	14 c0       	rjmp	.+40     	; 0x129c <LCD_Send_Command+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1274:	69 a9       	ldd	r22, Y+49	; 0x31
    1276:	7a a9       	ldd	r23, Y+50	; 0x32
    1278:	8b a9       	ldd	r24, Y+51	; 0x33
    127a:	9c a9       	ldd	r25, Y+52	; 0x34
    127c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	98 ab       	std	Y+48, r25	; 0x30
    1286:	8f a7       	std	Y+47, r24	; 0x2f
    1288:	8f a5       	ldd	r24, Y+47	; 0x2f
    128a:	98 a9       	ldd	r25, Y+48	; 0x30
    128c:	9c a7       	std	Y+44, r25	; 0x2c
    128e:	8b a7       	std	Y+43, r24	; 0x2b
    1290:	8b a5       	ldd	r24, Y+43	; 0x2b
    1292:	9c a5       	ldd	r25, Y+44	; 0x2c
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <LCD_Send_Command+0x224>
    1298:	9c a7       	std	Y+44, r25	; 0x2c
    129a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/* Clearing Data Port  For new Data*/
	LCD_DATA_PORT &= (0x87);
    129c:	ab e3       	ldi	r26, 0x3B	; 59
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	eb e3       	ldi	r30, 0x3B	; 59
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	87 78       	andi	r24, 0x87	; 135
    12a8:	8c 93       	st	X, r24
	LCD_DATA_PORT |=((command>>4)&0x0F)<<3;
    12aa:	ab e3       	ldi	r26, 0x3B	; 59
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	eb e3       	ldi	r30, 0x3B	; 59
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	fe 01       	movw	r30, r28
    12b8:	e9 5b       	subi	r30, 0xB9	; 185
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	80 81       	ld	r24, Z
    12be:	82 95       	swap	r24
    12c0:	8f 70       	andi	r24, 0x0F	; 15
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	82 2b       	or	r24, r18
    12d4:	8c 93       	st	X, r24
	LCD_CTRL_PORT_E &=~(1<<E);
    12d6:	ab e3       	ldi	r26, 0x3B	; 59
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	eb e3       	ldi	r30, 0x3B	; 59
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8b 7f       	andi	r24, 0xFB	; 251
    12e2:	8c 93       	st	X, r24
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a0 e8       	ldi	r26, 0x80	; 128
    12ea:	bf e3       	ldi	r27, 0x3F	; 63
    12ec:	8f a3       	std	Y+39, r24	; 0x27
    12ee:	98 a7       	std	Y+40, r25	; 0x28
    12f0:	a9 a7       	std	Y+41, r26	; 0x29
    12f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f4:	6f a1       	ldd	r22, Y+39	; 0x27
    12f6:	78 a5       	ldd	r23, Y+40	; 0x28
    12f8:	89 a5       	ldd	r24, Y+41	; 0x29
    12fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	4a e7       	ldi	r20, 0x7A	; 122
    1302:	53 e4       	ldi	r21, 0x43	; 67
    1304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	8b a3       	std	Y+35, r24	; 0x23
    130e:	9c a3       	std	Y+36, r25	; 0x24
    1310:	ad a3       	std	Y+37, r26	; 0x25
    1312:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1314:	6b a1       	ldd	r22, Y+35	; 0x23
    1316:	7c a1       	ldd	r23, Y+36	; 0x24
    1318:	8d a1       	ldd	r24, Y+37	; 0x25
    131a:	9e a1       	ldd	r25, Y+38	; 0x26
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e8       	ldi	r20, 0x80	; 128
    1322:	5f e3       	ldi	r21, 0x3F	; 63
    1324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1328:	88 23       	and	r24, r24
    132a:	2c f4       	brge	.+10     	; 0x1336 <LCD_Send_Command+0x2c6>
		__ticks = 1;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9a a3       	std	Y+34, r25	; 0x22
    1332:	89 a3       	std	Y+33, r24	; 0x21
    1334:	3f c0       	rjmp	.+126    	; 0x13b4 <LCD_Send_Command+0x344>
	else if (__tmp > 65535)
    1336:	6b a1       	ldd	r22, Y+35	; 0x23
    1338:	7c a1       	ldd	r23, Y+36	; 0x24
    133a:	8d a1       	ldd	r24, Y+37	; 0x25
    133c:	9e a1       	ldd	r25, Y+38	; 0x26
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	3f ef       	ldi	r19, 0xFF	; 255
    1342:	4f e7       	ldi	r20, 0x7F	; 127
    1344:	57 e4       	ldi	r21, 0x47	; 71
    1346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    134a:	18 16       	cp	r1, r24
    134c:	4c f5       	brge	.+82     	; 0x13a0 <LCD_Send_Command+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    134e:	6f a1       	ldd	r22, Y+39	; 0x27
    1350:	78 a5       	ldd	r23, Y+40	; 0x28
    1352:	89 a5       	ldd	r24, Y+41	; 0x29
    1354:	9a a5       	ldd	r25, Y+42	; 0x2a
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e2       	ldi	r20, 0x20	; 32
    135c:	51 e4       	ldi	r21, 0x41	; 65
    135e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	bc 01       	movw	r22, r24
    1368:	cd 01       	movw	r24, r26
    136a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	9a a3       	std	Y+34, r25	; 0x22
    1374:	89 a3       	std	Y+33, r24	; 0x21
    1376:	0f c0       	rjmp	.+30     	; 0x1396 <LCD_Send_Command+0x326>
    1378:	89 e1       	ldi	r24, 0x19	; 25
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	98 a3       	std	Y+32, r25	; 0x20
    137e:	8f 8f       	std	Y+31, r24	; 0x1f
    1380:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1382:	98 a1       	ldd	r25, Y+32	; 0x20
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <LCD_Send_Command+0x314>
    1388:	98 a3       	std	Y+32, r25	; 0x20
    138a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138c:	89 a1       	ldd	r24, Y+33	; 0x21
    138e:	9a a1       	ldd	r25, Y+34	; 0x22
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	9a a3       	std	Y+34, r25	; 0x22
    1394:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1396:	89 a1       	ldd	r24, Y+33	; 0x21
    1398:	9a a1       	ldd	r25, Y+34	; 0x22
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	69 f7       	brne	.-38     	; 0x1378 <LCD_Send_Command+0x308>
    139e:	14 c0       	rjmp	.+40     	; 0x13c8 <LCD_Send_Command+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a0:	6b a1       	ldd	r22, Y+35	; 0x23
    13a2:	7c a1       	ldd	r23, Y+36	; 0x24
    13a4:	8d a1       	ldd	r24, Y+37	; 0x25
    13a6:	9e a1       	ldd	r25, Y+38	; 0x26
    13a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	9a a3       	std	Y+34, r25	; 0x22
    13b2:	89 a3       	std	Y+33, r24	; 0x21
    13b4:	89 a1       	ldd	r24, Y+33	; 0x21
    13b6:	9a a1       	ldd	r25, Y+34	; 0x22
    13b8:	9e 8f       	std	Y+30, r25	; 0x1e
    13ba:	8d 8f       	std	Y+29, r24	; 0x1d
    13bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <LCD_Send_Command+0x350>
    13c4:	9e 8f       	std	Y+30, r25	; 0x1e
    13c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_CTRL_PORT_RS &=~(1<<RS); // command mode
    13c8:	ab e3       	ldi	r26, 0x3B	; 59
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	eb e3       	ldi	r30, 0x3B	; 59
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8d 7f       	andi	r24, 0xFD	; 253
    13d4:	8c 93       	st	X, r24
	LCD_CTRL_PORT_E |=(1<<E);
    13d6:	ab e3       	ldi	r26, 0x3B	; 59
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	eb e3       	ldi	r30, 0x3B	; 59
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	84 60       	ori	r24, 0x04	; 4
    13e2:	8c 93       	st	X, r24
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 e8       	ldi	r26, 0x80	; 128
    13ea:	bf e3       	ldi	r27, 0x3F	; 63
    13ec:	89 8f       	std	Y+25, r24	; 0x19
    13ee:	9a 8f       	std	Y+26, r25	; 0x1a
    13f0:	ab 8f       	std	Y+27, r26	; 0x1b
    13f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	69 8d       	ldd	r22, Y+25	; 0x19
    13f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a e7       	ldi	r20, 0x7A	; 122
    1402:	53 e4       	ldi	r21, 0x43	; 67
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8d 8b       	std	Y+21, r24	; 0x15
    140e:	9e 8b       	std	Y+22, r25	; 0x16
    1410:	af 8b       	std	Y+23, r26	; 0x17
    1412:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1414:	6d 89       	ldd	r22, Y+21	; 0x15
    1416:	7e 89       	ldd	r23, Y+22	; 0x16
    1418:	8f 89       	ldd	r24, Y+23	; 0x17
    141a:	98 8d       	ldd	r25, Y+24	; 0x18
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <LCD_Send_Command+0x3c6>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9c 8b       	std	Y+20, r25	; 0x14
    1432:	8b 8b       	std	Y+19, r24	; 0x13
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <LCD_Send_Command+0x444>
	else if (__tmp > 65535)
    1436:	6d 89       	ldd	r22, Y+21	; 0x15
    1438:	7e 89       	ldd	r23, Y+22	; 0x16
    143a:	8f 89       	ldd	r24, Y+23	; 0x17
    143c:	98 8d       	ldd	r25, Y+24	; 0x18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <LCD_Send_Command+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	69 8d       	ldd	r22, Y+25	; 0x19
    1450:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1452:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1454:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9c 8b       	std	Y+20, r25	; 0x14
    1474:	8b 8b       	std	Y+19, r24	; 0x13
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <LCD_Send_Command+0x426>
    1478:	89 e1       	ldi	r24, 0x19	; 25
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9a 8b       	std	Y+18, r25	; 0x12
    147e:	89 8b       	std	Y+17, r24	; 0x11
    1480:	89 89       	ldd	r24, Y+17	; 0x11
    1482:	9a 89       	ldd	r25, Y+18	; 0x12
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <LCD_Send_Command+0x414>
    1488:	9a 8b       	std	Y+18, r25	; 0x12
    148a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8b 89       	ldd	r24, Y+19	; 0x13
    148e:	9c 89       	ldd	r25, Y+20	; 0x14
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9c 8b       	std	Y+20, r25	; 0x14
    1494:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8b 89       	ldd	r24, Y+19	; 0x13
    1498:	9c 89       	ldd	r25, Y+20	; 0x14
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <LCD_Send_Command+0x408>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <LCD_Send_Command+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6d 89       	ldd	r22, Y+21	; 0x15
    14a2:	7e 89       	ldd	r23, Y+22	; 0x16
    14a4:	8f 89       	ldd	r24, Y+23	; 0x17
    14a6:	98 8d       	ldd	r25, Y+24	; 0x18
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9c 8b       	std	Y+20, r25	; 0x14
    14b2:	8b 8b       	std	Y+19, r24	; 0x13
    14b4:	8b 89       	ldd	r24, Y+19	; 0x13
    14b6:	9c 89       	ldd	r25, Y+20	; 0x14
    14b8:	98 8b       	std	Y+16, r25	; 0x10
    14ba:	8f 87       	std	Y+15, r24	; 0x0f
    14bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14be:	98 89       	ldd	r25, Y+16	; 0x10
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <LCD_Send_Command+0x450>
    14c4:	98 8b       	std	Y+16, r25	; 0x10
    14c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/* Clearing Data Port  For new Data*/
	LCD_DATA_PORT &= (0x87);
    14c8:	ab e3       	ldi	r26, 0x3B	; 59
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	eb e3       	ldi	r30, 0x3B	; 59
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	87 78       	andi	r24, 0x87	; 135
    14d4:	8c 93       	st	X, r24
	LCD_DATA_PORT |=(command&0x0F)<<3;
    14d6:	ab e3       	ldi	r26, 0x3B	; 59
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	eb e3       	ldi	r30, 0x3B	; 59
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	fe 01       	movw	r30, r28
    14e4:	e9 5b       	subi	r30, 0xB9	; 185
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	80 81       	ld	r24, Z
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	8f 70       	andi	r24, 0x0F	; 15
    14f0:	90 70       	andi	r25, 0x00	; 0
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	82 2b       	or	r24, r18
    1500:	8c 93       	st	X, r24
	LCD_CTRL_PORT_E &=~(1<<E);
    1502:	ab e3       	ldi	r26, 0x3B	; 59
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	eb e3       	ldi	r30, 0x3B	; 59
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8b 7f       	andi	r24, 0xFB	; 251
    150e:	8c 93       	st	X, r24
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e8       	ldi	r26, 0x80	; 128
    1516:	bf e3       	ldi	r27, 0x3F	; 63
    1518:	8b 87       	std	Y+11, r24	; 0x0b
    151a:	9c 87       	std	Y+12, r25	; 0x0c
    151c:	ad 87       	std	Y+13, r26	; 0x0d
    151e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1520:	6b 85       	ldd	r22, Y+11	; 0x0b
    1522:	7c 85       	ldd	r23, Y+12	; 0x0c
    1524:	8d 85       	ldd	r24, Y+13	; 0x0d
    1526:	9e 85       	ldd	r25, Y+14	; 0x0e
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4a e7       	ldi	r20, 0x7A	; 122
    152e:	53 e4       	ldi	r21, 0x43	; 67
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8f 83       	std	Y+7, r24	; 0x07
    153a:	98 87       	std	Y+8, r25	; 0x08
    153c:	a9 87       	std	Y+9, r26	; 0x09
    153e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1540:	6f 81       	ldd	r22, Y+7	; 0x07
    1542:	78 85       	ldd	r23, Y+8	; 0x08
    1544:	89 85       	ldd	r24, Y+9	; 0x09
    1546:	9a 85       	ldd	r25, Y+10	; 0x0a
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	2c f4       	brge	.+10     	; 0x1562 <LCD_Send_Command+0x4f2>
		__ticks = 1;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	3f c0       	rjmp	.+126    	; 0x15e0 <LCD_Send_Command+0x570>
	else if (__tmp > 65535)
    1562:	6f 81       	ldd	r22, Y+7	; 0x07
    1564:	78 85       	ldd	r23, Y+8	; 0x08
    1566:	89 85       	ldd	r24, Y+9	; 0x09
    1568:	9a 85       	ldd	r25, Y+10	; 0x0a
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1576:	18 16       	cp	r1, r24
    1578:	4c f5       	brge	.+82     	; 0x15cc <LCD_Send_Command+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157a:	6b 85       	ldd	r22, Y+11	; 0x0b
    157c:	7c 85       	ldd	r23, Y+12	; 0x0c
    157e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1580:	9e 85       	ldd	r25, Y+14	; 0x0e
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e2       	ldi	r20, 0x20	; 32
    1588:	51 e4       	ldi	r21, 0x41	; 65
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <LCD_Send_Command+0x552>
    15a4:	89 e1       	ldi	r24, 0x19	; 25
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9c 83       	std	Y+4, r25	; 0x04
    15aa:	8b 83       	std	Y+3, r24	; 0x03
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <LCD_Send_Command+0x540>
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	9e 83       	std	Y+6, r25	; 0x06
    15c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <LCD_Send_Command+0x534>
    15ca:	14 c0       	rjmp	.+40     	; 0x15f4 <LCD_Send_Command+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15cc:	6f 81       	ldd	r22, Y+7	; 0x07
    15ce:	78 85       	ldd	r23, Y+8	; 0x08
    15d0:	89 85       	ldd	r24, Y+9	; 0x09
    15d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9e 83       	std	Y+6, r25	; 0x06
    15de:	8d 83       	std	Y+5, r24	; 0x05
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <LCD_Send_Command+0x57c>
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif

}
    15f4:	c9 5b       	subi	r28, 0xB9	; 185
    15f6:	df 4f       	sbci	r29, 0xFF	; 255
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	08 95       	ret

0000160c <LCD_Clear_Display>:
/*LCD Clearing the display*/
void LCD_Clear_Display(void)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Command(CLEAR_DISPLAY);
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_Send_Command>
}
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <LCD_Send_character>:

/*LCD displaying a character*/
void LCD_Send_character(char character)
{
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	c7 54       	subi	r28, 0x47	; 71
    162e:	d0 40       	sbci	r29, 0x00	; 0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	fe 01       	movw	r30, r28
    163c:	e9 5b       	subi	r30, 0xB9	; 185
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	80 83       	st	Z, r24
	LCD_CTRL_PORT_E &=~(1<<E);
	_delay_ms(1);

	/*LCD as 8bit mode*/
#elif LCD_BIT_MODE == 4
	LCD_CTRL_PORT_RS |=(1<<RS); // Data mode
    1642:	ab e3       	ldi	r26, 0x3B	; 59
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	eb e3       	ldi	r30, 0x3B	; 59
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	82 60       	ori	r24, 0x02	; 2
    164e:	8c 93       	st	X, r24
    1650:	fe 01       	movw	r30, r28
    1652:	ed 5b       	subi	r30, 0xBD	; 189
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e8       	ldi	r26, 0x80	; 128
    165c:	bf e3       	ldi	r27, 0x3F	; 63
    165e:	80 83       	st	Z, r24
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	a2 83       	std	Z+2, r26	; 0x02
    1664:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1666:	8e 01       	movw	r16, r28
    1668:	01 5c       	subi	r16, 0xC1	; 193
    166a:	1f 4f       	sbci	r17, 0xFF	; 255
    166c:	fe 01       	movw	r30, r28
    166e:	ed 5b       	subi	r30, 0xBD	; 189
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	60 81       	ld	r22, Z
    1674:	71 81       	ldd	r23, Z+1	; 0x01
    1676:	82 81       	ldd	r24, Z+2	; 0x02
    1678:	93 81       	ldd	r25, Z+3	; 0x03
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	4a e7       	ldi	r20, 0x7A	; 122
    1680:	53 e4       	ldi	r21, 0x43	; 67
    1682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	f8 01       	movw	r30, r16
    168c:	80 83       	st	Z, r24
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	a2 83       	std	Z+2, r26	; 0x02
    1692:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1694:	fe 01       	movw	r30, r28
    1696:	ff 96       	adiw	r30, 0x3f	; 63
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	2c f4       	brge	.+10     	; 0x16ba <LCD_Send_character+0x9a>
		__ticks = 1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9e af       	std	Y+62, r25	; 0x3e
    16b6:	8d af       	std	Y+61, r24	; 0x3d
    16b8:	46 c0       	rjmp	.+140    	; 0x1746 <LCD_Send_character+0x126>
	else if (__tmp > 65535)
    16ba:	fe 01       	movw	r30, r28
    16bc:	ff 96       	adiw	r30, 0x3f	; 63
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	64 f5       	brge	.+88     	; 0x172e <LCD_Send_character+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	fe 01       	movw	r30, r28
    16d8:	ed 5b       	subi	r30, 0xBD	; 189
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e2       	ldi	r20, 0x20	; 32
    16ea:	51 e4       	ldi	r21, 0x41	; 65
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9e af       	std	Y+62, r25	; 0x3e
    1702:	8d af       	std	Y+61, r24	; 0x3d
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <LCD_Send_character+0x104>
    1706:	89 e1       	ldi	r24, 0x19	; 25
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9c af       	std	Y+60, r25	; 0x3c
    170c:	8b af       	std	Y+59, r24	; 0x3b
    170e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1710:	9c ad       	ldd	r25, Y+60	; 0x3c
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <LCD_Send_character+0xf2>
    1716:	9c af       	std	Y+60, r25	; 0x3c
    1718:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171a:	8d ad       	ldd	r24, Y+61	; 0x3d
    171c:	9e ad       	ldd	r25, Y+62	; 0x3e
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	9e af       	std	Y+62, r25	; 0x3e
    1722:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1724:	8d ad       	ldd	r24, Y+61	; 0x3d
    1726:	9e ad       	ldd	r25, Y+62	; 0x3e
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	69 f7       	brne	.-38     	; 0x1706 <LCD_Send_character+0xe6>
    172c:	16 c0       	rjmp	.+44     	; 0x175a <LCD_Send_character+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172e:	fe 01       	movw	r30, r28
    1730:	ff 96       	adiw	r30, 0x3f	; 63
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e af       	std	Y+62, r25	; 0x3e
    1744:	8d af       	std	Y+61, r24	; 0x3d
    1746:	8d ad       	ldd	r24, Y+61	; 0x3d
    1748:	9e ad       	ldd	r25, Y+62	; 0x3e
    174a:	9a af       	std	Y+58, r25	; 0x3a
    174c:	89 af       	std	Y+57, r24	; 0x39
    174e:	89 ad       	ldd	r24, Y+57	; 0x39
    1750:	9a ad       	ldd	r25, Y+58	; 0x3a
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <LCD_Send_character+0x132>
    1756:	9a af       	std	Y+58, r25	; 0x3a
    1758:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_CTRL_PORT_E |=(1<<E);
    175a:	ab e3       	ldi	r26, 0x3B	; 59
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	eb e3       	ldi	r30, 0x3B	; 59
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	84 60       	ori	r24, 0x04	; 4
    1766:	8c 93       	st	X, r24
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 e8       	ldi	r26, 0x80	; 128
    176e:	bf e3       	ldi	r27, 0x3F	; 63
    1770:	8d ab       	std	Y+53, r24	; 0x35
    1772:	9e ab       	std	Y+54, r25	; 0x36
    1774:	af ab       	std	Y+55, r26	; 0x37
    1776:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	6d a9       	ldd	r22, Y+53	; 0x35
    177a:	7e a9       	ldd	r23, Y+54	; 0x36
    177c:	8f a9       	ldd	r24, Y+55	; 0x37
    177e:	98 ad       	ldd	r25, Y+56	; 0x38
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a e7       	ldi	r20, 0x7A	; 122
    1786:	53 e4       	ldi	r21, 0x43	; 67
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	89 ab       	std	Y+49, r24	; 0x31
    1792:	9a ab       	std	Y+50, r25	; 0x32
    1794:	ab ab       	std	Y+51, r26	; 0x33
    1796:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1798:	69 a9       	ldd	r22, Y+49	; 0x31
    179a:	7a a9       	ldd	r23, Y+50	; 0x32
    179c:	8b a9       	ldd	r24, Y+51	; 0x33
    179e:	9c a9       	ldd	r25, Y+52	; 0x34
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	2c f4       	brge	.+10     	; 0x17ba <LCD_Send_character+0x19a>
		__ticks = 1;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	98 ab       	std	Y+48, r25	; 0x30
    17b6:	8f a7       	std	Y+47, r24	; 0x2f
    17b8:	3f c0       	rjmp	.+126    	; 0x1838 <LCD_Send_character+0x218>
	else if (__tmp > 65535)
    17ba:	69 a9       	ldd	r22, Y+49	; 0x31
    17bc:	7a a9       	ldd	r23, Y+50	; 0x32
    17be:	8b a9       	ldd	r24, Y+51	; 0x33
    17c0:	9c a9       	ldd	r25, Y+52	; 0x34
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	4c f5       	brge	.+82     	; 0x1824 <LCD_Send_character+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d2:	6d a9       	ldd	r22, Y+53	; 0x35
    17d4:	7e a9       	ldd	r23, Y+54	; 0x36
    17d6:	8f a9       	ldd	r24, Y+55	; 0x37
    17d8:	98 ad       	ldd	r25, Y+56	; 0x38
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	98 ab       	std	Y+48, r25	; 0x30
    17f8:	8f a7       	std	Y+47, r24	; 0x2f
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <LCD_Send_character+0x1fa>
    17fc:	89 e1       	ldi	r24, 0x19	; 25
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9e a7       	std	Y+46, r25	; 0x2e
    1802:	8d a7       	std	Y+45, r24	; 0x2d
    1804:	8d a5       	ldd	r24, Y+45	; 0x2d
    1806:	9e a5       	ldd	r25, Y+46	; 0x2e
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCD_Send_character+0x1e8>
    180c:	9e a7       	std	Y+46, r25	; 0x2e
    180e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1810:	8f a5       	ldd	r24, Y+47	; 0x2f
    1812:	98 a9       	ldd	r25, Y+48	; 0x30
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	98 ab       	std	Y+48, r25	; 0x30
    1818:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181a:	8f a5       	ldd	r24, Y+47	; 0x2f
    181c:	98 a9       	ldd	r25, Y+48	; 0x30
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	69 f7       	brne	.-38     	; 0x17fc <LCD_Send_character+0x1dc>
    1822:	14 c0       	rjmp	.+40     	; 0x184c <LCD_Send_character+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1824:	69 a9       	ldd	r22, Y+49	; 0x31
    1826:	7a a9       	ldd	r23, Y+50	; 0x32
    1828:	8b a9       	ldd	r24, Y+51	; 0x33
    182a:	9c a9       	ldd	r25, Y+52	; 0x34
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	98 ab       	std	Y+48, r25	; 0x30
    1836:	8f a7       	std	Y+47, r24	; 0x2f
    1838:	8f a5       	ldd	r24, Y+47	; 0x2f
    183a:	98 a9       	ldd	r25, Y+48	; 0x30
    183c:	9c a7       	std	Y+44, r25	; 0x2c
    183e:	8b a7       	std	Y+43, r24	; 0x2b
    1840:	8b a5       	ldd	r24, Y+43	; 0x2b
    1842:	9c a5       	ldd	r25, Y+44	; 0x2c
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD_Send_character+0x224>
    1848:	9c a7       	std	Y+44, r25	; 0x2c
    184a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	
	/* Clearing Data Port  For new Data*/
	LCD_DATA_PORT &= (0x87);
    184c:	ab e3       	ldi	r26, 0x3B	; 59
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	eb e3       	ldi	r30, 0x3B	; 59
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	87 78       	andi	r24, 0x87	; 135
    1858:	8c 93       	st	X, r24
	LCD_DATA_PORT |=((character>>4)&0x0F)<<3;
    185a:	ab e3       	ldi	r26, 0x3B	; 59
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	eb e3       	ldi	r30, 0x3B	; 59
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	28 2f       	mov	r18, r24
    1866:	fe 01       	movw	r30, r28
    1868:	e9 5b       	subi	r30, 0xB9	; 185
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 81       	ld	r24, Z
    186e:	82 95       	swap	r24
    1870:	8f 70       	andi	r24, 0x0F	; 15
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	82 2b       	or	r24, r18
    1884:	8c 93       	st	X, r24
	LCD_CTRL_PORT_E &=~(1<<E);
    1886:	ab e3       	ldi	r26, 0x3B	; 59
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	eb e3       	ldi	r30, 0x3B	; 59
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8b 7f       	andi	r24, 0xFB	; 251
    1892:	8c 93       	st	X, r24
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e8       	ldi	r26, 0x80	; 128
    189a:	bf e3       	ldi	r27, 0x3F	; 63
    189c:	8f a3       	std	Y+39, r24	; 0x27
    189e:	98 a7       	std	Y+40, r25	; 0x28
    18a0:	a9 a7       	std	Y+41, r26	; 0x29
    18a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	6f a1       	ldd	r22, Y+39	; 0x27
    18a6:	78 a5       	ldd	r23, Y+40	; 0x28
    18a8:	89 a5       	ldd	r24, Y+41	; 0x29
    18aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a e7       	ldi	r20, 0x7A	; 122
    18b2:	53 e4       	ldi	r21, 0x43	; 67
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8b a3       	std	Y+35, r24	; 0x23
    18be:	9c a3       	std	Y+36, r25	; 0x24
    18c0:	ad a3       	std	Y+37, r26	; 0x25
    18c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18c4:	6b a1       	ldd	r22, Y+35	; 0x23
    18c6:	7c a1       	ldd	r23, Y+36	; 0x24
    18c8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ca:	9e a1       	ldd	r25, Y+38	; 0x26
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <LCD_Send_character+0x2c6>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9a a3       	std	Y+34, r25	; 0x22
    18e2:	89 a3       	std	Y+33, r24	; 0x21
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <LCD_Send_character+0x344>
	else if (__tmp > 65535)
    18e6:	6b a1       	ldd	r22, Y+35	; 0x23
    18e8:	7c a1       	ldd	r23, Y+36	; 0x24
    18ea:	8d a1       	ldd	r24, Y+37	; 0x25
    18ec:	9e a1       	ldd	r25, Y+38	; 0x26
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <LCD_Send_character+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1900:	78 a5       	ldd	r23, Y+40	; 0x28
    1902:	89 a5       	ldd	r24, Y+41	; 0x29
    1904:	9a a5       	ldd	r25, Y+42	; 0x2a
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9a a3       	std	Y+34, r25	; 0x22
    1924:	89 a3       	std	Y+33, r24	; 0x21
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <LCD_Send_character+0x326>
    1928:	89 e1       	ldi	r24, 0x19	; 25
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	98 a3       	std	Y+32, r25	; 0x20
    192e:	8f 8f       	std	Y+31, r24	; 0x1f
    1930:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1932:	98 a1       	ldd	r25, Y+32	; 0x20
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_Send_character+0x314>
    1938:	98 a3       	std	Y+32, r25	; 0x20
    193a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	89 a1       	ldd	r24, Y+33	; 0x21
    193e:	9a a1       	ldd	r25, Y+34	; 0x22
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9a a3       	std	Y+34, r25	; 0x22
    1944:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	89 a1       	ldd	r24, Y+33	; 0x21
    1948:	9a a1       	ldd	r25, Y+34	; 0x22
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <LCD_Send_character+0x308>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <LCD_Send_character+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6b a1       	ldd	r22, Y+35	; 0x23
    1952:	7c a1       	ldd	r23, Y+36	; 0x24
    1954:	8d a1       	ldd	r24, Y+37	; 0x25
    1956:	9e a1       	ldd	r25, Y+38	; 0x26
    1958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9a a3       	std	Y+34, r25	; 0x22
    1962:	89 a3       	std	Y+33, r24	; 0x21
    1964:	89 a1       	ldd	r24, Y+33	; 0x21
    1966:	9a a1       	ldd	r25, Y+34	; 0x22
    1968:	9e 8f       	std	Y+30, r25	; 0x1e
    196a:	8d 8f       	std	Y+29, r24	; 0x1d
    196c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    196e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_Send_character+0x350>
    1974:	9e 8f       	std	Y+30, r25	; 0x1e
    1976:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_CTRL_PORT_RS |=(1<<RS); // Data mode
    1978:	ab e3       	ldi	r26, 0x3B	; 59
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	eb e3       	ldi	r30, 0x3B	; 59
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	82 60       	ori	r24, 0x02	; 2
    1984:	8c 93       	st	X, r24
	LCD_CTRL_PORT_E |=(1<<E);
    1986:	ab e3       	ldi	r26, 0x3B	; 59
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	eb e3       	ldi	r30, 0x3B	; 59
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	84 60       	ori	r24, 0x04	; 4
    1992:	8c 93       	st	X, r24
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 e8       	ldi	r26, 0x80	; 128
    199a:	bf e3       	ldi	r27, 0x3F	; 63
    199c:	89 8f       	std	Y+25, r24	; 0x19
    199e:	9a 8f       	std	Y+26, r25	; 0x1a
    19a0:	ab 8f       	std	Y+27, r26	; 0x1b
    19a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	69 8d       	ldd	r22, Y+25	; 0x19
    19a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4a e7       	ldi	r20, 0x7A	; 122
    19b2:	53 e4       	ldi	r21, 0x43	; 67
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	8d 8b       	std	Y+21, r24	; 0x15
    19be:	9e 8b       	std	Y+22, r25	; 0x16
    19c0:	af 8b       	std	Y+23, r26	; 0x17
    19c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19c4:	6d 89       	ldd	r22, Y+21	; 0x15
    19c6:	7e 89       	ldd	r23, Y+22	; 0x16
    19c8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ca:	98 8d       	ldd	r25, Y+24	; 0x18
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d8:	88 23       	and	r24, r24
    19da:	2c f4       	brge	.+10     	; 0x19e6 <LCD_Send_character+0x3c6>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	9c 8b       	std	Y+20, r25	; 0x14
    19e2:	8b 8b       	std	Y+19, r24	; 0x13
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <LCD_Send_character+0x444>
	else if (__tmp > 65535)
    19e6:	6d 89       	ldd	r22, Y+21	; 0x15
    19e8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ea:	8f 89       	ldd	r24, Y+23	; 0x17
    19ec:	98 8d       	ldd	r25, Y+24	; 0x18
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	4c f5       	brge	.+82     	; 0x1a50 <LCD_Send_character+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1a00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	51 e4       	ldi	r21, 0x41	; 65
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9c 8b       	std	Y+20, r25	; 0x14
    1a24:	8b 8b       	std	Y+19, r24	; 0x13
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <LCD_Send_character+0x426>
    1a28:	89 e1       	ldi	r24, 0x19	; 25
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	9a 8b       	std	Y+18, r25	; 0x12
    1a2e:	89 8b       	std	Y+17, r24	; 0x11
    1a30:	89 89       	ldd	r24, Y+17	; 0x11
    1a32:	9a 89       	ldd	r25, Y+18	; 0x12
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_Send_character+0x414>
    1a38:	9a 8b       	std	Y+18, r25	; 0x12
    1a3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	9c 8b       	std	Y+20, r25	; 0x14
    1a44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a46:	8b 89       	ldd	r24, Y+19	; 0x13
    1a48:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	69 f7       	brne	.-38     	; 0x1a28 <LCD_Send_character+0x408>
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <LCD_Send_character+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a50:	6d 89       	ldd	r22, Y+21	; 0x15
    1a52:	7e 89       	ldd	r23, Y+22	; 0x16
    1a54:	8f 89       	ldd	r24, Y+23	; 0x17
    1a56:	98 8d       	ldd	r25, Y+24	; 0x18
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9c 8b       	std	Y+20, r25	; 0x14
    1a62:	8b 8b       	std	Y+19, r24	; 0x13
    1a64:	8b 89       	ldd	r24, Y+19	; 0x13
    1a66:	9c 89       	ldd	r25, Y+20	; 0x14
    1a68:	98 8b       	std	Y+16, r25	; 0x10
    1a6a:	8f 87       	std	Y+15, r24	; 0x0f
    1a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6e:	98 89       	ldd	r25, Y+16	; 0x10
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_Send_character+0x450>
    1a74:	98 8b       	std	Y+16, r25	; 0x10
    1a76:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/* Clearing Data Port  For new Data*/
	LCD_DATA_PORT &= (0x87);
    1a78:	ab e3       	ldi	r26, 0x3B	; 59
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	eb e3       	ldi	r30, 0x3B	; 59
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	87 78       	andi	r24, 0x87	; 135
    1a84:	8c 93       	st	X, r24
	LCD_DATA_PORT |=(character&0x0F)<<3;
    1a86:	ab e3       	ldi	r26, 0x3B	; 59
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	eb e3       	ldi	r30, 0x3B	; 59
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	28 2f       	mov	r18, r24
    1a92:	fe 01       	movw	r30, r28
    1a94:	e9 5b       	subi	r30, 0xB9	; 185
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	8f 70       	andi	r24, 0x0F	; 15
    1aa0:	90 70       	andi	r25, 0x00	; 0
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	82 2b       	or	r24, r18
    1ab0:	8c 93       	st	X, r24
	LCD_CTRL_PORT_E &=~(1<<E);
    1ab2:	ab e3       	ldi	r26, 0x3B	; 59
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	eb e3       	ldi	r30, 0x3B	; 59
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	8b 7f       	andi	r24, 0xFB	; 251
    1abe:	8c 93       	st	X, r24
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	a0 e8       	ldi	r26, 0x80	; 128
    1ac6:	bf e3       	ldi	r27, 0x3F	; 63
    1ac8:	8b 87       	std	Y+11, r24	; 0x0b
    1aca:	9c 87       	std	Y+12, r25	; 0x0c
    1acc:	ad 87       	std	Y+13, r26	; 0x0d
    1ace:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	4a e7       	ldi	r20, 0x7A	; 122
    1ade:	53 e4       	ldi	r21, 0x43	; 67
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	8f 83       	std	Y+7, r24	; 0x07
    1aea:	98 87       	std	Y+8, r25	; 0x08
    1aec:	a9 87       	std	Y+9, r26	; 0x09
    1aee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af0:	6f 81       	ldd	r22, Y+7	; 0x07
    1af2:	78 85       	ldd	r23, Y+8	; 0x08
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e8       	ldi	r20, 0x80	; 128
    1afe:	5f e3       	ldi	r21, 0x3F	; 63
    1b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b04:	88 23       	and	r24, r24
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <LCD_Send_character+0x4f2>
		__ticks = 1;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	3f c0       	rjmp	.+126    	; 0x1b90 <LCD_Send_character+0x570>
	else if (__tmp > 65535)
    1b12:	6f 81       	ldd	r22, Y+7	; 0x07
    1b14:	78 85       	ldd	r23, Y+8	; 0x08
    1b16:	89 85       	ldd	r24, Y+9	; 0x09
    1b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	3f ef       	ldi	r19, 0xFF	; 255
    1b1e:	4f e7       	ldi	r20, 0x7F	; 127
    1b20:	57 e4       	ldi	r21, 0x47	; 71
    1b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b26:	18 16       	cp	r1, r24
    1b28:	4c f5       	brge	.+82     	; 0x1b7c <LCD_Send_character+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e2       	ldi	r20, 0x20	; 32
    1b38:	51 e4       	ldi	r21, 0x41	; 65
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <LCD_Send_character+0x552>
    1b54:	89 e1       	ldi	r24, 0x19	; 25
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9c 83       	std	Y+4, r25	; 0x04
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <LCD_Send_character+0x540>
    1b64:	9c 83       	std	Y+4, r25	; 0x04
    1b66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	9e 81       	ldd	r25, Y+6	; 0x06
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	69 f7       	brne	.-38     	; 0x1b54 <LCD_Send_character+0x534>
    1b7a:	14 c0       	rjmp	.+40     	; 0x1ba4 <LCD_Send_character+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7e:	78 85       	ldd	r23, Y+8	; 0x08
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_Send_character+0x57c>
    1ba0:	9a 83       	std	Y+2, r25	; 0x02
    1ba2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    1ba4:	c9 5b       	subi	r28, 0xB9	; 185
    1ba6:	df 4f       	sbci	r29, 0xFF	; 255
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	08 95       	ret

00001bbc <LCD_Send_String>:

/*LCD displaying a String*/
void LCD_Send_String(char *string)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <LCD_Send_String+0x6>
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <LCD_Send_String+0x8>
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
    1bca:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    1bcc:	1a 82       	std	Y+2, r1	; 0x02
    1bce:	19 82       	std	Y+1, r1	; 0x01
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <LCD_Send_String+0x34>
	while(string[i]!='\0')
	{
		LCD_Send_character(string[i]);
    1bd2:	29 81       	ldd	r18, Y+1	; 0x01
    1bd4:	3a 81       	ldd	r19, Y+2	; 0x02
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e2 0f       	add	r30, r18
    1bde:	f3 1f       	adc	r31, r19
    1be0:	80 81       	ld	r24, Z
    1be2:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Send_character>
		i++;
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01

/*LCD displaying a String*/
void LCD_Send_String(char *string)
{
	int i=0;
	while(string[i]!='\0')
    1bf0:	29 81       	ldd	r18, Y+1	; 0x01
    1bf2:	3a 81       	ldd	r19, Y+2	; 0x02
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	e2 0f       	add	r30, r18
    1bfc:	f3 1f       	adc	r31, r19
    1bfe:	80 81       	ld	r24, Z
    1c00:	88 23       	and	r24, r24
    1c02:	39 f7       	brne	.-50     	; 0x1bd2 <LCD_Send_String+0x16>
	{
		LCD_Send_character(string[i]);
		i++;
	}
}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <LCD_GoTO_Row_Colunmn>:

/*set the cursor at certain location*/
void LCD_GoTO_Row_Colunmn(char Row,char Column)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <LCD_GoTO_Row_Colunmn+0x6>
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <LCD_GoTO_Row_Colunmn+0x8>
    1c1a:	0f 92       	push	r0
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	8a 83       	std	Y+2, r24	; 0x02
    1c22:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char address=0;
    1c24:	19 82       	std	Y+1, r1	; 0x01

	switch (Row)
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	3d 83       	std	Y+5, r19	; 0x05
    1c2e:	2c 83       	std	Y+4, r18	; 0x04
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	9d 81       	ldd	r25, Y+5	; 0x05
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	91 05       	cpc	r25, r1
    1c38:	c1 f0       	breq	.+48     	; 0x1c6a <LCD_GoTO_Row_Colunmn+0x58>
    1c3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c3e:	22 30       	cpi	r18, 0x02	; 2
    1c40:	31 05       	cpc	r19, r1
    1c42:	2c f4       	brge	.+10     	; 0x1c4e <LCD_GoTO_Row_Colunmn+0x3c>
    1c44:	8c 81       	ldd	r24, Y+4	; 0x04
    1c46:	9d 81       	ldd	r25, Y+5	; 0x05
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	61 f0       	breq	.+24     	; 0x1c64 <LCD_GoTO_Row_Colunmn+0x52>
    1c4c:	19 c0       	rjmp	.+50     	; 0x1c80 <LCD_GoTO_Row_Colunmn+0x6e>
    1c4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c50:	3d 81       	ldd	r19, Y+5	; 0x05
    1c52:	22 30       	cpi	r18, 0x02	; 2
    1c54:	31 05       	cpc	r19, r1
    1c56:	69 f0       	breq	.+26     	; 0x1c72 <LCD_GoTO_Row_Colunmn+0x60>
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5c:	83 30       	cpi	r24, 0x03	; 3
    1c5e:	91 05       	cpc	r25, r1
    1c60:	61 f0       	breq	.+24     	; 0x1c7a <LCD_GoTO_Row_Colunmn+0x68>
    1c62:	0e c0       	rjmp	.+28     	; 0x1c80 <LCD_GoTO_Row_Colunmn+0x6e>
	{
	case 0:address =(Column);break;
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	0b c0       	rjmp	.+22     	; 0x1c80 <LCD_GoTO_Row_Colunmn+0x6e>
	case 1:address =(Column+0x40);break;
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	80 5c       	subi	r24, 0xC0	; 192
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	07 c0       	rjmp	.+14     	; 0x1c80 <LCD_GoTO_Row_Colunmn+0x6e>
	case 2:address =(Column+0x10);break;
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	80 5f       	subi	r24, 0xF0	; 240
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	03 c0       	rjmp	.+6      	; 0x1c80 <LCD_GoTO_Row_Colunmn+0x6e>
	case 3:address =(Column+0x50);break;
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	80 5b       	subi	r24, 0xB0	; 176
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	}

	/* we need to apply the corresponding command 0b10000000+Address */
	LCD_Send_Command(address|(SET_CURSOR_LOCATION));
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	80 68       	ori	r24, 0x80	; 128
    1c84:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_Send_Command>

}
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <LCD_Send_String_Row_Column>:

/*lcd Send String at certain location*/
void LCD_Send_String_Row_Column(char Row,char Column,char *String)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <LCD_Send_String_Row_Column+0x6>
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <LCD_Send_String_Row_Column+0x8>
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	6a 83       	std	Y+2, r22	; 0x02
    1ca8:	5c 83       	std	Y+4, r21	; 0x04
    1caa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoTO_Row_Colunmn(Row,Column);
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	6a 81       	ldd	r22, Y+2	; 0x02
    1cb0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_GoTO_Row_Colunmn>
	LCD_Send_String(String);
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Send_String>
}
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <LCD_IntToString>:

/*since the lcd is alpha Numeric print characters only*/
void LCD_IntToString(int integer,char *String)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <LCD_IntToString+0x6>
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <LCD_IntToString+0x8>
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	9a 83       	std	Y+2, r25	; 0x02
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	7c 83       	std	Y+4, r23	; 0x04
    1cdc:	6b 83       	std	Y+3, r22	; 0x03
	itoa(integer,String,10);
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce6:	b9 01       	movw	r22, r18
    1ce8:	4a e0       	ldi	r20, 0x0A	; 10
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	0e 94 4c 13 	call	0x2698	; 0x2698 <itoa>
}
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <LCD_Set_Custom_Char>:
*
* Return Value: Void.
***********************************************************************/

void LCD_Set_Custom_Char(unsigned char Location , unsigned char * Pattern)
	{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <LCD_Set_Custom_Char+0x6>
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <LCD_Set_Custom_Char+0x8>
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	8a 83       	std	Y+2, r24	; 0x02
    1d0c:	7c 83       	std	Y+4, r23	; 0x04
    1d0e:	6b 83       	std	Y+3, r22	; 0x03
		unsigned char ArrayIndex =0;
    1d10:	19 82       	std	Y+1, r1	; 0x01
		/* the Add offset must be 0 to 7*/
		if (Location < 8)
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	88 30       	cpi	r24, 0x08	; 8
    1d16:	f8 f4       	brcc	.+62     	; 0x1d56 <LCD_Set_Custom_Char+0x58>
		{
			LCD_Send_Command(0x40 + (Location * 8));
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	88 2f       	mov	r24, r24
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	08 96       	adiw	r24, 0x08	; 8
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_Send_Command>
			for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    1d30:	19 82       	std	Y+1, r1	; 0x01
    1d32:	0e c0       	rjmp	.+28     	; 0x1d50 <LCD_Set_Custom_Char+0x52>
			{
				LCD_Send_character(Pattern[ArrayIndex]);
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e2 0f       	add	r30, r18
    1d42:	f3 1f       	adc	r31, r19
    1d44:	80 81       	ld	r24, Z
    1d46:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Send_character>
		unsigned char ArrayIndex =0;
		/* the Add offset must be 0 to 7*/
		if (Location < 8)
		{
			LCD_Send_Command(0x40 + (Location * 8));
			for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	88 30       	cpi	r24, 0x08	; 8
    1d54:	78 f3       	brcs	.-34     	; 0x1d34 <LCD_Set_Custom_Char+0x36>
		}
		else
		{
			/* TODO: return Error */
		}
	}
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <adc_init_int>:
#include"adc.h"


void adc_init_int()

{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
//	Select Vref to AVCC PIN
	SET_BIT(ADMUX,REFS0);
    1d6c:	a7 e2       	ldi	r26, 0x27	; 39
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e7 e2       	ldi	r30, 0x27	; 39
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	80 64       	ori	r24, 0x40	; 64
    1d78:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    1d7a:	a7 e2       	ldi	r26, 0x27	; 39
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e7 e2       	ldi	r30, 0x27	; 39
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8f 77       	andi	r24, 0x7F	; 127
    1d86:	8c 93       	st	X, r24
//	select ADC prescaler
	SET_BIT(ADCSRA,ADPS2);
    1d88:	a6 e2       	ldi	r26, 0x26	; 38
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e6 e2       	ldi	r30, 0x26	; 38
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	84 60       	ori	r24, 0x04	; 4
    1d94:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    1d96:	a6 e2       	ldi	r26, 0x26	; 38
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e6 e2       	ldi	r30, 0x26	; 38
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	82 60       	ori	r24, 0x02	; 2
    1da2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS0);
    1da4:	a6 e2       	ldi	r26, 0x26	; 38
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e6 e2       	ldi	r30, 0x26	; 38
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	81 60       	ori	r24, 0x01	; 1
    1db0:	8c 93       	st	X, r24
//  interrupt en
	SET_BIT(ADCSRA,ADIE);
    1db2:	a6 e2       	ldi	r26, 0x26	; 38
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e6 e2       	ldi	r30, 0x26	; 38
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	88 60       	ori	r24, 0x08	; 8
    1dbe:	8c 93       	st	X, r24
//	Enable ADC
	SET_BIT(ADCSRA,ADEN);
    1dc0:	a6 e2       	ldi	r26, 0x26	; 38
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e6 e2       	ldi	r30, 0x26	; 38
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 68       	ori	r24, 0x80	; 128
    1dcc:	8c 93       	st	X, r24
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <adc_read_int>:

uint16_t adc_read_int(uint8_t ch)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	0f 92       	push	r0
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	89 83       	std	Y+1, r24	; 0x01
//	select the corresponding channel
	ADMUX &= 0xE0;  //to make sure that channel selection did not messed up
    1de0:	a7 e2       	ldi	r26, 0x27	; 39
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e7 e2       	ldi	r30, 0x27	; 39
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	80 7e       	andi	r24, 0xE0	; 224
    1dec:	8c 93       	st	X, r24
	ADMUX |=ch;
    1dee:	a7 e2       	ldi	r26, 0x27	; 39
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e7 e2       	ldi	r30, 0x27	; 39
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	90 81       	ld	r25, Z
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	89 2b       	or	r24, r25
    1dfc:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);  //start single conversion
    1dfe:	a6 e2       	ldi	r26, 0x26	; 38
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e6 e2       	ldi	r30, 0x26	; 38
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	80 64       	ori	r24, 0x40	; 64
    1e0a:	8c 93       	st	X, r24

	while(ADCSRA &(1<<ADSC));
    1e0c:	e6 e2       	ldi	r30, 0x26	; 38
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	80 74       	andi	r24, 0x40	; 64
    1e18:	90 70       	andi	r25, 0x00	; 0
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	b9 f7       	brne	.-18     	; 0x1e0c <adc_read_int+0x38>

	return ADC;
    1e1e:	e4 e2       	ldi	r30, 0x24	; 36
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <UART_sendByte>:
char s1[10];
unsigned short temp ;
unsigned int soil;
unsigned char val,g_flag;
#define GetBit(Reg,BitNo)       (Reg&(1<<BitNo))
void UART_sendByte(unsigned char c){
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	0f 92       	push	r0
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	89 83       	std	Y+1, r24	; 0x01


	while(!GetBit(UCSRA,UDRE));
    1e3a:	eb e2       	ldi	r30, 0x2B	; 43
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	80 72       	andi	r24, 0x20	; 32
    1e46:	90 70       	andi	r25, 0x00	; 0
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	b9 f3       	breq	.-18     	; 0x1e3a <UART_sendByte+0xc>
	UDR=c;
    1e4c:	ec e2       	ldi	r30, 0x2C	; 44
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	80 83       	st	Z, r24

}
    1e54:	0f 90       	pop	r0
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <UART_rByte>:

unsigned char UART_rByte(void){
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62


	while(!GetBit(UCSRA,RXC));
    1e64:	eb e2       	ldi	r30, 0x2B	; 43
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	88 23       	and	r24, r24
    1e6c:	dc f7       	brge	.-10     	; 0x1e64 <UART_rByte+0x8>
	return UDR;
    1e6e:	ec e2       	ldi	r30, 0x2C	; 44
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z

}
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <adc_init>:



void adc_init()

{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
	//    Select Vref to AVCC PIN
	SET_BIT(ADMUX,REFS0);
    1e82:	a7 e2       	ldi	r26, 0x27	; 39
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e7 e2       	ldi	r30, 0x27	; 39
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 64       	ori	r24, 0x40	; 64
    1e8e:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    1e90:	a7 e2       	ldi	r26, 0x27	; 39
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e7 e2       	ldi	r30, 0x27	; 39
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	8f 77       	andi	r24, 0x7F	; 127
    1e9c:	8c 93       	st	X, r24

	//    select ADC prescaler
	SET_BIT(ADCSRA,ADPS2);
    1e9e:	a6 e2       	ldi	r26, 0x26	; 38
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e6 e2       	ldi	r30, 0x26	; 38
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	84 60       	ori	r24, 0x04	; 4
    1eaa:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    1eac:	a6 e2       	ldi	r26, 0x26	; 38
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e6 e2       	ldi	r30, 0x26	; 38
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	82 60       	ori	r24, 0x02	; 2
    1eb8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS0);
    1eba:	a6 e2       	ldi	r26, 0x26	; 38
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e6 e2       	ldi	r30, 0x26	; 38
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	81 60       	ori	r24, 0x01	; 1
    1ec6:	8c 93       	st	X, r24
	//    Enable ADC
	SET_BIT(ADCSRA,ADEN);
    1ec8:	a6 e2       	ldi	r26, 0x26	; 38
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e6 e2       	ldi	r30, 0x26	; 38
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	80 68       	ori	r24, 0x80	; 128
    1ed4:	8c 93       	st	X, r24

}
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <adc_read>:
uint16_t adc_read(uint8_t ch)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	0f 92       	push	r0
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	//    select the corresponding channel
	ADMUX &= 0xE0;  //to make sure that channel selection did not messed up
    1ee8:	a7 e2       	ldi	r26, 0x27	; 39
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e7 e2       	ldi	r30, 0x27	; 39
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	80 7e       	andi	r24, 0xE0	; 224
    1ef4:	8c 93       	st	X, r24
	ADMUX |=ch;
    1ef6:	a7 e2       	ldi	r26, 0x27	; 39
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e7 e2       	ldi	r30, 0x27	; 39
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	90 81       	ld	r25, Z
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	89 2b       	or	r24, r25
    1f04:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);  //start single conversion
    1f06:	a6 e2       	ldi	r26, 0x26	; 38
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e6 e2       	ldi	r30, 0x26	; 38
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	80 64       	ori	r24, 0x40	; 64
    1f12:	8c 93       	st	X, r24

	while(ADCSRA &(1<<ADSC));
    1f14:	e6 e2       	ldi	r30, 0x26	; 38
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	80 74       	andi	r24, 0x40	; 64
    1f20:	90 70       	andi	r25, 0x00	; 0
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	b9 f7       	brne	.-18     	; 0x1f14 <adc_read+0x38>

	return ADC;
    1f26:	e4 e2       	ldi	r30, 0x24	; 36
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <control_motor>:
void control_motor(float temp) {
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <control_motor+0x6>
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <control_motor+0x8>
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	69 83       	std	Y+1, r22	; 0x01
    1f44:	7a 83       	std	Y+2, r23	; 0x02
    1f46:	8b 83       	std	Y+3, r24	; 0x03
    1f48:	9c 83       	std	Y+4, r25	; 0x04
	if (temp < threshold) {
    1f4a:	69 81       	ldd	r22, Y+1	; 0x01
    1f4c:	7a 81       	ldd	r23, Y+2	; 0x02
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e9       	ldi	r20, 0x90	; 144
    1f58:	52 e4       	ldi	r21, 0x42	; 66
    1f5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	24 f4       	brge	.+8      	; 0x1f6a <control_motor+0x34>
		set_pwm_duty_cycle(255); // 100% duty cycle for fast speed
    1f62:	8f ef       	ldi	r24, 0xFF	; 255
    1f64:	0e 94 84 07 	call	0xf08	; 0xf08 <set_pwm_duty_cycle>
    1f68:	03 c0       	rjmp	.+6      	; 0x1f70 <control_motor+0x3a>
	}
	else {
		set_pwm_duty_cycle(64); // 25% duty cycle for Low speed
    1f6a:	80 e4       	ldi	r24, 0x40	; 64
    1f6c:	0e 94 84 07 	call	0xf08	; 0xf08 <set_pwm_duty_cycle>
	}
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <main>:




int main() {
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	c2 54       	subi	r28, 0x42	; 66
    1f88:	d0 40       	sbci	r29, 0x00	; 0
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
	//	DDRD |=(1<<PD5);
	//	PORTD^=(1<<PD5);
	//	MCUCR&=~(1<<ISC00);
	//	MCUCR|=(1<<ISC01);
	//	GICR |= (1<<INT0);
	DDRC = 0xFF ;
    1f94:	e4 e3       	ldi	r30, 0x34	; 52
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
    1f9a:	80 83       	st	Z, r24
	PORTC=0;
    1f9c:	e5 e3       	ldi	r30, 0x35	; 53
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	10 82       	st	Z, r1
	DDRA &=0b01111110;
    1fa2:	aa e3       	ldi	r26, 0x3A	; 58
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ea e3       	ldi	r30, 0x3A	; 58
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	8e 77       	andi	r24, 0x7E	; 126
    1fae:	8c 93       	st	X, r24
	// Initialize LCD module
	LCD_Init();
    1fb0:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Init>
	UCSRB = (1<<RXCIE)|(1<<RXEN);
    1fb4:	ea e2       	ldi	r30, 0x2A	; 42
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 e9       	ldi	r24, 0x90	; 144
    1fba:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    1fbc:	e0 e4       	ldi	r30, 0x40	; 64
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	86 e8       	ldi	r24, 0x86	; 134
    1fc2:	80 83       	st	Z, r24
	UBRRH=0;
    1fc4:	e0 e4       	ldi	r30, 0x40	; 64
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	10 82       	st	Z, r1
	UBRRL=103;
    1fca:	e9 e2       	ldi	r30, 0x29	; 41
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	87 e6       	ldi	r24, 0x67	; 103
    1fd0:	80 83       	st	Z, r24

	LCD_Send_String("BADAWY");	/* Write string on 1st line of LCD*/
    1fd2:	80 e6       	ldi	r24, 0x60	; 96
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Send_String>
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ff 96       	adiw	r30, 0x3f	; 63
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a8 ec       	ldi	r26, 0xC8	; 200
    1fe4:	b2 e4       	ldi	r27, 0x42	; 66
    1fe6:	80 83       	st	Z, r24
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	a2 83       	std	Z+2, r26	; 0x02
    1fec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ff 96       	adiw	r30, 0x3f	; 63
    1ff2:	60 81       	ld	r22, Z
    1ff4:	71 81       	ldd	r23, Z+1	; 0x01
    1ff6:	82 81       	ldd	r24, Z+2	; 0x02
    1ff8:	93 81       	ldd	r25, Z+3	; 0x03
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	4a e7       	ldi	r20, 0x7A	; 122
    2000:	53 e4       	ldi	r21, 0x43	; 67
    2002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	8b af       	std	Y+59, r24	; 0x3b
    200c:	9c af       	std	Y+60, r25	; 0x3c
    200e:	ad af       	std	Y+61, r26	; 0x3d
    2010:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    2012:	6b ad       	ldd	r22, Y+59	; 0x3b
    2014:	7c ad       	ldd	r23, Y+60	; 0x3c
    2016:	8d ad       	ldd	r24, Y+61	; 0x3d
    2018:	9e ad       	ldd	r25, Y+62	; 0x3e
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e8       	ldi	r20, 0x80	; 128
    2020:	5f e3       	ldi	r21, 0x3F	; 63
    2022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2026:	88 23       	and	r24, r24
    2028:	2c f4       	brge	.+10     	; 0x2034 <main+0xb6>
		__ticks = 1;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9a af       	std	Y+58, r25	; 0x3a
    2030:	89 af       	std	Y+57, r24	; 0x39
    2032:	41 c0       	rjmp	.+130    	; 0x20b6 <main+0x138>
	else if (__tmp > 65535)
    2034:	6b ad       	ldd	r22, Y+59	; 0x3b
    2036:	7c ad       	ldd	r23, Y+60	; 0x3c
    2038:	8d ad       	ldd	r24, Y+61	; 0x3d
    203a:	9e ad       	ldd	r25, Y+62	; 0x3e
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	3f ef       	ldi	r19, 0xFF	; 255
    2040:	4f e7       	ldi	r20, 0x7F	; 127
    2042:	57 e4       	ldi	r21, 0x47	; 71
    2044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2048:	18 16       	cp	r1, r24
    204a:	5c f5       	brge	.+86     	; 0x20a2 <main+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204c:	fe 01       	movw	r30, r28
    204e:	ff 96       	adiw	r30, 0x3f	; 63
    2050:	60 81       	ld	r22, Z
    2052:	71 81       	ldd	r23, Z+1	; 0x01
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e2       	ldi	r20, 0x20	; 32
    205e:	51 e4       	ldi	r21, 0x41	; 65
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9a af       	std	Y+58, r25	; 0x3a
    2076:	89 af       	std	Y+57, r24	; 0x39
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <main+0x11a>
    207a:	89 e1       	ldi	r24, 0x19	; 25
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	98 af       	std	Y+56, r25	; 0x38
    2080:	8f ab       	std	Y+55, r24	; 0x37
    2082:	8f a9       	ldd	r24, Y+55	; 0x37
    2084:	98 ad       	ldd	r25, Y+56	; 0x38
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <main+0x108>
    208a:	98 af       	std	Y+56, r25	; 0x38
    208c:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208e:	89 ad       	ldd	r24, Y+57	; 0x39
    2090:	9a ad       	ldd	r25, Y+58	; 0x3a
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	9a af       	std	Y+58, r25	; 0x3a
    2096:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2098:	89 ad       	ldd	r24, Y+57	; 0x39
    209a:	9a ad       	ldd	r25, Y+58	; 0x3a
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	69 f7       	brne	.-38     	; 0x207a <main+0xfc>
    20a0:	14 c0       	rjmp	.+40     	; 0x20ca <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a2:	6b ad       	ldd	r22, Y+59	; 0x3b
    20a4:	7c ad       	ldd	r23, Y+60	; 0x3c
    20a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9a af       	std	Y+58, r25	; 0x3a
    20b4:	89 af       	std	Y+57, r24	; 0x39
    20b6:	89 ad       	ldd	r24, Y+57	; 0x39
    20b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    20ba:	9e ab       	std	Y+54, r25	; 0x36
    20bc:	8d ab       	std	Y+53, r24	; 0x35
    20be:	8d a9       	ldd	r24, Y+53	; 0x35
    20c0:	9e a9       	ldd	r25, Y+54	; 0x36
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <main+0x144>
    20c6:	9e ab       	std	Y+54, r25	; 0x36
    20c8:	8d ab       	std	Y+53, r24	; 0x35


	_delay_ms(100);
	//-------------------------------pwm init-----------------------------------------
	pwm_init();
    20ca:	0e 94 68 07 	call	0xed0	; 0xed0 <pwm_init>
	//-------------------------------UART SENSOR--------------------------------------
	//	Uart_init(9600);

	while (1) {
		//-------------------------------SOIL SENSOR--------------------------------------
		DDRA &=0b01111110;
    20ce:	aa e3       	ldi	r26, 0x3A	; 58
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ea e3       	ldi	r30, 0x3A	; 58
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8e 77       	andi	r24, 0x7E	; 126
    20da:	8c 93       	st	X, r24
		adc_init();
    20dc:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <adc_init>
		soil = adc_read(0);
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <adc_read>
    20e6:	90 93 98 01 	sts	0x0198, r25
    20ea:	80 93 97 01 	sts	0x0197, r24
		if(soil<500) {
    20ee:	80 91 97 01 	lds	r24, 0x0197
    20f2:	90 91 98 01 	lds	r25, 0x0198
    20f6:	21 e0       	ldi	r18, 0x01	; 1
    20f8:	84 3f       	cpi	r24, 0xF4	; 244
    20fa:	92 07       	cpc	r25, r18
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <main+0x182>
    20fe:	87 c0       	rjmp	.+270    	; 0x220e <main+0x290>
			PORTC |=(1<<PC1);
    2100:	a5 e3       	ldi	r26, 0x35	; 53
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e5 e3       	ldi	r30, 0x35	; 53
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	82 60       	ori	r24, 0x02	; 2
    210c:	8c 93       	st	X, r24
			LCD_Init();
    210e:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Init>
			LCD_Send_String("Pumb is ON");
    2112:	87 e6       	ldi	r24, 0x67	; 103
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Send_String>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	a8 ec       	ldi	r26, 0xC8	; 200
    2120:	b2 e4       	ldi	r27, 0x42	; 66
    2122:	89 ab       	std	Y+49, r24	; 0x31
    2124:	9a ab       	std	Y+50, r25	; 0x32
    2126:	ab ab       	std	Y+51, r26	; 0x33
    2128:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212a:	69 a9       	ldd	r22, Y+49	; 0x31
    212c:	7a a9       	ldd	r23, Y+50	; 0x32
    212e:	8b a9       	ldd	r24, Y+51	; 0x33
    2130:	9c a9       	ldd	r25, Y+52	; 0x34
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	4a e7       	ldi	r20, 0x7A	; 122
    2138:	53 e4       	ldi	r21, 0x43	; 67
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	8d a7       	std	Y+45, r24	; 0x2d
    2144:	9e a7       	std	Y+46, r25	; 0x2e
    2146:	af a7       	std	Y+47, r26	; 0x2f
    2148:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    214a:	6d a5       	ldd	r22, Y+45	; 0x2d
    214c:	7e a5       	ldd	r23, Y+46	; 0x2e
    214e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2150:	98 a9       	ldd	r25, Y+48	; 0x30
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    215e:	88 23       	and	r24, r24
    2160:	2c f4       	brge	.+10     	; 0x216c <main+0x1ee>
		__ticks = 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9c a7       	std	Y+44, r25	; 0x2c
    2168:	8b a7       	std	Y+43, r24	; 0x2b
    216a:	3f c0       	rjmp	.+126    	; 0x21ea <main+0x26c>
	else if (__tmp > 65535)
    216c:	6d a5       	ldd	r22, Y+45	; 0x2d
    216e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2170:	8f a5       	ldd	r24, Y+47	; 0x2f
    2172:	98 a9       	ldd	r25, Y+48	; 0x30
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	3f ef       	ldi	r19, 0xFF	; 255
    2178:	4f e7       	ldi	r20, 0x7F	; 127
    217a:	57 e4       	ldi	r21, 0x47	; 71
    217c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2180:	18 16       	cp	r1, r24
    2182:	4c f5       	brge	.+82     	; 0x21d6 <main+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2184:	69 a9       	ldd	r22, Y+49	; 0x31
    2186:	7a a9       	ldd	r23, Y+50	; 0x32
    2188:	8b a9       	ldd	r24, Y+51	; 0x33
    218a:	9c a9       	ldd	r25, Y+52	; 0x34
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e2       	ldi	r20, 0x20	; 32
    2192:	51 e4       	ldi	r21, 0x41	; 65
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9c a7       	std	Y+44, r25	; 0x2c
    21aa:	8b a7       	std	Y+43, r24	; 0x2b
    21ac:	0f c0       	rjmp	.+30     	; 0x21cc <main+0x24e>
    21ae:	89 e1       	ldi	r24, 0x19	; 25
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9a a7       	std	Y+42, r25	; 0x2a
    21b4:	89 a7       	std	Y+41, r24	; 0x29
    21b6:	89 a5       	ldd	r24, Y+41	; 0x29
    21b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <main+0x23c>
    21be:	9a a7       	std	Y+42, r25	; 0x2a
    21c0:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	9c a7       	std	Y+44, r25	; 0x2c
    21ca:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	69 f7       	brne	.-38     	; 0x21ae <main+0x230>
    21d4:	14 c0       	rjmp	.+40     	; 0x21fe <main+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    21d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    21da:	8f a5       	ldd	r24, Y+47	; 0x2f
    21dc:	98 a9       	ldd	r25, Y+48	; 0x30
    21de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9c a7       	std	Y+44, r25	; 0x2c
    21e8:	8b a7       	std	Y+43, r24	; 0x2b
    21ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ee:	98 a7       	std	Y+40, r25	; 0x28
    21f0:	8f a3       	std	Y+39, r24	; 0x27
    21f2:	8f a1       	ldd	r24, Y+39	; 0x27
    21f4:	98 a5       	ldd	r25, Y+40	; 0x28
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <main+0x278>
    21fa:	98 a7       	std	Y+40, r25	; 0x28
    21fc:	8f a3       	std	Y+39, r24	; 0x27
			_delay_ms(100);
			PORTC &= ~(1<<PC1);
    21fe:	a5 e3       	ldi	r26, 0x35	; 53
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e5 e3       	ldi	r30, 0x35	; 53
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	8d 7f       	andi	r24, 0xFD	; 253
    220a:	8c 93       	st	X, r24
    220c:	07 c0       	rjmp	.+14     	; 0x221c <main+0x29e>
		}
		else{
			PORTC &= ~(1<<PC1);
    220e:	a5 e3       	ldi	r26, 0x35	; 53
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e5 e3       	ldi	r30, 0x35	; 53
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	8d 7f       	andi	r24, 0xFD	; 253
    221a:	8c 93       	st	X, r24
		}
		//-------------------------------TEMP SENSOR--------------------------------------
		DDRA &=0b01111110;
    221c:	aa e3       	ldi	r26, 0x3A	; 58
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	ea e3       	ldi	r30, 0x3A	; 58
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	8e 77       	andi	r24, 0x7E	; 126
    2228:	8c 93       	st	X, r24
		adc_init();
    222a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <adc_init>
		Temp_volt =adc_read(7);
    222e:	87 e0       	ldi	r24, 0x07	; 7
    2230:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <adc_read>
    2234:	cc 01       	movw	r24, r24
    2236:	a0 e0       	ldi	r26, 0x00	; 0
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	80 93 86 01 	sts	0x0186, r24
    224a:	90 93 87 01 	sts	0x0187, r25
    224e:	a0 93 88 01 	sts	0x0188, r26
    2252:	b0 93 89 01 	sts	0x0189, r27
		temp = ( (Temp_volt * 5) /1023)*100;
    2256:	80 91 86 01 	lds	r24, 0x0186
    225a:	90 91 87 01 	lds	r25, 0x0187
    225e:	a0 91 88 01 	lds	r26, 0x0188
    2262:	b0 91 89 01 	lds	r27, 0x0189
    2266:	bc 01       	movw	r22, r24
    2268:	cd 01       	movw	r24, r26
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 ea       	ldi	r20, 0xA0	; 160
    2270:	50 e4       	ldi	r21, 0x40	; 64
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 ec       	ldi	r19, 0xC0	; 192
    2282:	4f e7       	ldi	r20, 0x7F	; 127
    2284:	54 e4       	ldi	r21, 0x44	; 68
    2286:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	48 ec       	ldi	r20, 0xC8	; 200
    2298:	52 e4       	ldi	r21, 0x42	; 66
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	90 93 8b 01 	sts	0x018B, r25
    22b2:	80 93 8a 01 	sts	0x018A, r24
		sprintf(s1, "Temp: %u", temp);
    22b6:	20 91 8a 01 	lds	r18, 0x018A
    22ba:	30 91 8b 01 	lds	r19, 0x018B
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <main+0x342>
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <main+0x344>
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <main+0x346>
    22c4:	ed b7       	in	r30, 0x3d	; 61
    22c6:	fe b7       	in	r31, 0x3e	; 62
    22c8:	31 96       	adiw	r30, 0x01	; 1
    22ca:	8d e8       	ldi	r24, 0x8D	; 141
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	82 e7       	ldi	r24, 0x72	; 114
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	93 83       	std	Z+3, r25	; 0x03
    22d8:	82 83       	std	Z+2, r24	; 0x02
    22da:	35 83       	std	Z+5, r19	; 0x05
    22dc:	24 83       	std	Z+4, r18	; 0x04
    22de:	0e 94 6d 13 	call	0x26da	; 0x26da <sprintf>
    22e2:	8d b7       	in	r24, 0x3d	; 61
    22e4:	9e b7       	in	r25, 0x3e	; 62
    22e6:	06 96       	adiw	r24, 0x06	; 6
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	9e bf       	out	0x3e, r25	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	8d bf       	out	0x3d, r24	; 61
		control_motor(Temp_volt);
    22f2:	80 91 86 01 	lds	r24, 0x0186
    22f6:	90 91 87 01 	lds	r25, 0x0187
    22fa:	a0 91 88 01 	lds	r26, 0x0188
    22fe:	b0 91 89 01 	lds	r27, 0x0189
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <control_motor>
		LCD_Init();
    230a:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Init>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	a0 ea       	ldi	r26, 0xA0	; 160
    2314:	b0 e4       	ldi	r27, 0x40	; 64
    2316:	8b a3       	std	Y+35, r24	; 0x23
    2318:	9c a3       	std	Y+36, r25	; 0x24
    231a:	ad a3       	std	Y+37, r26	; 0x25
    231c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    231e:	6b a1       	ldd	r22, Y+35	; 0x23
    2320:	7c a1       	ldd	r23, Y+36	; 0x24
    2322:	8d a1       	ldd	r24, Y+37	; 0x25
    2324:	9e a1       	ldd	r25, Y+38	; 0x26
    2326:	2b ea       	ldi	r18, 0xAB	; 171
    2328:	3a ea       	ldi	r19, 0xAA	; 170
    232a:	4a ea       	ldi	r20, 0xAA	; 170
    232c:	5e e3       	ldi	r21, 0x3E	; 62
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	8f 8f       	std	Y+31, r24	; 0x1f
    2338:	98 a3       	std	Y+32, r25	; 0x20
    233a:	a9 a3       	std	Y+33, r26	; 0x21
    233c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    233e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2340:	78 a1       	ldd	r23, Y+32	; 0x20
    2342:	89 a1       	ldd	r24, Y+33	; 0x21
    2344:	9a a1       	ldd	r25, Y+34	; 0x22
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e8       	ldi	r20, 0x80	; 128
    234c:	5f e3       	ldi	r21, 0x3F	; 63
    234e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2352:	88 23       	and	r24, r24
    2354:	1c f4       	brge	.+6      	; 0x235c <main+0x3de>
		__ticks = 1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	8e 8f       	std	Y+30, r24	; 0x1e
    235a:	91 c0       	rjmp	.+290    	; 0x247e <main+0x500>
	else if (__tmp > 255)
    235c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    235e:	78 a1       	ldd	r23, Y+32	; 0x20
    2360:	89 a1       	ldd	r24, Y+33	; 0x21
    2362:	9a a1       	ldd	r25, Y+34	; 0x22
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	53 e4       	ldi	r21, 0x43	; 67
    236c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	0c f0       	brlt	.+2      	; 0x2376 <main+0x3f8>
    2374:	7b c0       	rjmp	.+246    	; 0x246c <main+0x4ee>
	{
		_delay_ms(__us / 1000.0);
    2376:	6b a1       	ldd	r22, Y+35	; 0x23
    2378:	7c a1       	ldd	r23, Y+36	; 0x24
    237a:	8d a1       	ldd	r24, Y+37	; 0x25
    237c:	9e a1       	ldd	r25, Y+38	; 0x26
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	4a e7       	ldi	r20, 0x7A	; 122
    2384:	54 e4       	ldi	r21, 0x44	; 68
    2386:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	8a 8f       	std	Y+26, r24	; 0x1a
    2390:	9b 8f       	std	Y+27, r25	; 0x1b
    2392:	ac 8f       	std	Y+28, r26	; 0x1c
    2394:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2396:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2398:	7b 8d       	ldd	r23, Y+27	; 0x1b
    239a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    239c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4a e7       	ldi	r20, 0x7A	; 122
    23a4:	53 e4       	ldi	r21, 0x43	; 67
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	8e 8b       	std	Y+22, r24	; 0x16
    23b0:	9f 8b       	std	Y+23, r25	; 0x17
    23b2:	a8 8f       	std	Y+24, r26	; 0x18
    23b4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    23b6:	6e 89       	ldd	r22, Y+22	; 0x16
    23b8:	7f 89       	ldd	r23, Y+23	; 0x17
    23ba:	88 8d       	ldd	r24, Y+24	; 0x18
    23bc:	99 8d       	ldd	r25, Y+25	; 0x19
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e8       	ldi	r20, 0x80	; 128
    23c4:	5f e3       	ldi	r21, 0x3F	; 63
    23c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ca:	88 23       	and	r24, r24
    23cc:	2c f4       	brge	.+10     	; 0x23d8 <main+0x45a>
		__ticks = 1;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9d 8b       	std	Y+21, r25	; 0x15
    23d4:	8c 8b       	std	Y+20, r24	; 0x14
    23d6:	3f c0       	rjmp	.+126    	; 0x2456 <main+0x4d8>
	else if (__tmp > 65535)
    23d8:	6e 89       	ldd	r22, Y+22	; 0x16
    23da:	7f 89       	ldd	r23, Y+23	; 0x17
    23dc:	88 8d       	ldd	r24, Y+24	; 0x18
    23de:	99 8d       	ldd	r25, Y+25	; 0x19
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	3f ef       	ldi	r19, 0xFF	; 255
    23e4:	4f e7       	ldi	r20, 0x7F	; 127
    23e6:	57 e4       	ldi	r21, 0x47	; 71
    23e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	4c f5       	brge	.+82     	; 0x2442 <main+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23f2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e2       	ldi	r20, 0x20	; 32
    23fe:	51 e4       	ldi	r21, 0x41	; 65
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9d 8b       	std	Y+21, r25	; 0x15
    2416:	8c 8b       	std	Y+20, r24	; 0x14
    2418:	0f c0       	rjmp	.+30     	; 0x2438 <main+0x4ba>
    241a:	89 e1       	ldi	r24, 0x19	; 25
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9b 8b       	std	Y+19, r25	; 0x13
    2420:	8a 8b       	std	Y+18, r24	; 0x12
    2422:	8a 89       	ldd	r24, Y+18	; 0x12
    2424:	9b 89       	ldd	r25, Y+19	; 0x13
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <main+0x4a8>
    242a:	9b 8b       	std	Y+19, r25	; 0x13
    242c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242e:	8c 89       	ldd	r24, Y+20	; 0x14
    2430:	9d 89       	ldd	r25, Y+21	; 0x15
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	9d 8b       	std	Y+21, r25	; 0x15
    2436:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2438:	8c 89       	ldd	r24, Y+20	; 0x14
    243a:	9d 89       	ldd	r25, Y+21	; 0x15
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	69 f7       	brne	.-38     	; 0x241a <main+0x49c>
    2440:	24 c0       	rjmp	.+72     	; 0x248a <main+0x50c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2442:	6e 89       	ldd	r22, Y+22	; 0x16
    2444:	7f 89       	ldd	r23, Y+23	; 0x17
    2446:	88 8d       	ldd	r24, Y+24	; 0x18
    2448:	99 8d       	ldd	r25, Y+25	; 0x19
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9d 8b       	std	Y+21, r25	; 0x15
    2454:	8c 8b       	std	Y+20, r24	; 0x14
    2456:	8c 89       	ldd	r24, Y+20	; 0x14
    2458:	9d 89       	ldd	r25, Y+21	; 0x15
    245a:	99 8b       	std	Y+17, r25	; 0x11
    245c:	88 8b       	std	Y+16, r24	; 0x10
    245e:	88 89       	ldd	r24, Y+16	; 0x10
    2460:	99 89       	ldd	r25, Y+17	; 0x11
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <main+0x4e4>
    2466:	99 8b       	std	Y+17, r25	; 0x11
    2468:	88 8b       	std	Y+16, r24	; 0x10
    246a:	0f c0       	rjmp	.+30     	; 0x248a <main+0x50c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    246c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    246e:	78 a1       	ldd	r23, Y+32	; 0x20
    2470:	89 a1       	ldd	r24, Y+33	; 0x21
    2472:	9a a1       	ldd	r25, Y+34	; 0x22
    2474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8e 8f       	std	Y+30, r24	; 0x1e
    247e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2480:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2482:	8f 85       	ldd	r24, Y+15	; 0x0f
    2484:	8a 95       	dec	r24
    2486:	f1 f7       	brne	.-4      	; 0x2484 <main+0x506>
    2488:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(5);
		LCD_Send_String(s1);	 // Write string on 1st line of LCD
    248a:	8d e8       	ldi	r24, 0x8D	; 141
    248c:	91 e0       	ldi	r25, 0x01	; 1
    248e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Send_String>
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	aa ef       	ldi	r26, 0xFA	; 250
    2498:	b3 e4       	ldi	r27, 0x43	; 67
    249a:	8b 87       	std	Y+11, r24	; 0x0b
    249c:	9c 87       	std	Y+12, r25	; 0x0c
    249e:	ad 87       	std	Y+13, r26	; 0x0d
    24a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	4a e7       	ldi	r20, 0x7A	; 122
    24b0:	53 e4       	ldi	r21, 0x43	; 67
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	8f 83       	std	Y+7, r24	; 0x07
    24bc:	98 87       	std	Y+8, r25	; 0x08
    24be:	a9 87       	std	Y+9, r26	; 0x09
    24c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c2:	6f 81       	ldd	r22, Y+7	; 0x07
    24c4:	78 85       	ldd	r23, Y+8	; 0x08
    24c6:	89 85       	ldd	r24, Y+9	; 0x09
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e8       	ldi	r20, 0x80	; 128
    24d0:	5f e3       	ldi	r21, 0x3F	; 63
    24d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d6:	88 23       	and	r24, r24
    24d8:	2c f4       	brge	.+10     	; 0x24e4 <main+0x566>
		__ticks = 1;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	3f c0       	rjmp	.+126    	; 0x2562 <main+0x5e4>
	else if (__tmp > 65535)
    24e4:	6f 81       	ldd	r22, Y+7	; 0x07
    24e6:	78 85       	ldd	r23, Y+8	; 0x08
    24e8:	89 85       	ldd	r24, Y+9	; 0x09
    24ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	57 e4       	ldi	r21, 0x47	; 71
    24f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	4c f5       	brge	.+82     	; 0x254e <main+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2500:	8d 85       	ldd	r24, Y+13	; 0x0d
    2502:	9e 85       	ldd	r25, Y+14	; 0x0e
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e2       	ldi	r20, 0x20	; 32
    250a:	51 e4       	ldi	r21, 0x41	; 65
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
    2524:	0f c0       	rjmp	.+30     	; 0x2544 <main+0x5c6>
    2526:	89 e1       	ldi	r24, 0x19	; 25
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9c 83       	std	Y+4, r25	; 0x04
    252c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	9c 81       	ldd	r25, Y+4	; 0x04
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <main+0x5b4>
    2536:	9c 83       	std	Y+4, r25	; 0x04
    2538:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
    253c:	9e 81       	ldd	r25, Y+6	; 0x06
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	69 f7       	brne	.-38     	; 0x2526 <main+0x5a8>
    254c:	14 c0       	rjmp	.+40     	; 0x2576 <main+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254e:	6f 81       	ldd	r22, Y+7	; 0x07
    2550:	78 85       	ldd	r23, Y+8	; 0x08
    2552:	89 85       	ldd	r24, Y+9	; 0x09
    2554:	9a 85       	ldd	r25, Y+10	; 0x0a
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	9e 81       	ldd	r25, Y+6	; 0x06
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	9a 81       	ldd	r25, Y+2	; 0x02
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <main+0x5f0>
    2572:	9a 83       	std	Y+2, r25	; 0x02
    2574:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		//-------------------------------------------------------------------------------

		g_flag=UART_rByte();
    2576:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <UART_rByte>
    257a:	80 93 8c 01 	sts	0x018C, r24

		if(g_flag=='A'){
    257e:	80 91 8c 01 	lds	r24, 0x018C
    2582:	81 34       	cpi	r24, 0x41	; 65
    2584:	41 f4       	brne	.+16     	; 0x2596 <main+0x618>
			PORTC|=(1<<1);
    2586:	a5 e3       	ldi	r26, 0x35	; 53
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e5 e3       	ldi	r30, 0x35	; 53
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	82 60       	ori	r24, 0x02	; 2
    2592:	8c 93       	st	X, r24
    2594:	9c cd       	rjmp	.-1224   	; 0x20ce <main+0x150>
		}
		else if(g_flag=='B'){
    2596:	80 91 8c 01 	lds	r24, 0x018C
    259a:	82 34       	cpi	r24, 0x42	; 66
    259c:	09 f0       	breq	.+2      	; 0x25a0 <main+0x622>
    259e:	97 cd       	rjmp	.-1234   	; 0x20ce <main+0x150>
			PORTC&=~(1<<1);
    25a0:	a5 e3       	ldi	r26, 0x35	; 53
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e5 e3       	ldi	r30, 0x35	; 53
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	8d 7f       	andi	r24, 0xFD	; 253
    25ac:	8c 93       	st	X, r24
    25ae:	8f cd       	rjmp	.-1250   	; 0x20ce <main+0x150>

000025b0 <__vector_11>:
        PORTC &= ~(1<<0) ;
        break;
    }
}
 */
ISR(USART_RXC_vect){
    25b0:	1f 92       	push	r1
    25b2:	0f 92       	push	r0
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	0f 92       	push	r0
    25b8:	11 24       	eor	r1, r1
    25ba:	8f 93       	push	r24
    25bc:	ef 93       	push	r30
    25be:	ff 93       	push	r31
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
	g_flag=UDR;
    25c8:	ec e2       	ldi	r30, 0x2C	; 44
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	80 93 8c 01 	sts	0x018C, r24
}
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	ff 91       	pop	r31
    25d8:	ef 91       	pop	r30
    25da:	8f 91       	pop	r24
    25dc:	0f 90       	pop	r0
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	0f 90       	pop	r0
    25e2:	1f 90       	pop	r1
    25e4:	18 95       	reti

000025e6 <__udivmodsi4>:
    25e6:	a1 e2       	ldi	r26, 0x21	; 33
    25e8:	1a 2e       	mov	r1, r26
    25ea:	aa 1b       	sub	r26, r26
    25ec:	bb 1b       	sub	r27, r27
    25ee:	fd 01       	movw	r30, r26
    25f0:	0d c0       	rjmp	.+26     	; 0x260c <__udivmodsi4_ep>

000025f2 <__udivmodsi4_loop>:
    25f2:	aa 1f       	adc	r26, r26
    25f4:	bb 1f       	adc	r27, r27
    25f6:	ee 1f       	adc	r30, r30
    25f8:	ff 1f       	adc	r31, r31
    25fa:	a2 17       	cp	r26, r18
    25fc:	b3 07       	cpc	r27, r19
    25fe:	e4 07       	cpc	r30, r20
    2600:	f5 07       	cpc	r31, r21
    2602:	20 f0       	brcs	.+8      	; 0x260c <__udivmodsi4_ep>
    2604:	a2 1b       	sub	r26, r18
    2606:	b3 0b       	sbc	r27, r19
    2608:	e4 0b       	sbc	r30, r20
    260a:	f5 0b       	sbc	r31, r21

0000260c <__udivmodsi4_ep>:
    260c:	66 1f       	adc	r22, r22
    260e:	77 1f       	adc	r23, r23
    2610:	88 1f       	adc	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	1a 94       	dec	r1
    2616:	69 f7       	brne	.-38     	; 0x25f2 <__udivmodsi4_loop>
    2618:	60 95       	com	r22
    261a:	70 95       	com	r23
    261c:	80 95       	com	r24
    261e:	90 95       	com	r25
    2620:	9b 01       	movw	r18, r22
    2622:	ac 01       	movw	r20, r24
    2624:	bd 01       	movw	r22, r26
    2626:	cf 01       	movw	r24, r30
    2628:	08 95       	ret

0000262a <__prologue_saves__>:
    262a:	2f 92       	push	r2
    262c:	3f 92       	push	r3
    262e:	4f 92       	push	r4
    2630:	5f 92       	push	r5
    2632:	6f 92       	push	r6
    2634:	7f 92       	push	r7
    2636:	8f 92       	push	r8
    2638:	9f 92       	push	r9
    263a:	af 92       	push	r10
    263c:	bf 92       	push	r11
    263e:	cf 92       	push	r12
    2640:	df 92       	push	r13
    2642:	ef 92       	push	r14
    2644:	ff 92       	push	r15
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	ca 1b       	sub	r28, r26
    2654:	db 0b       	sbc	r29, r27
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	09 94       	ijmp

00002662 <__epilogue_restores__>:
    2662:	2a 88       	ldd	r2, Y+18	; 0x12
    2664:	39 88       	ldd	r3, Y+17	; 0x11
    2666:	48 88       	ldd	r4, Y+16	; 0x10
    2668:	5f 84       	ldd	r5, Y+15	; 0x0f
    266a:	6e 84       	ldd	r6, Y+14	; 0x0e
    266c:	7d 84       	ldd	r7, Y+13	; 0x0d
    266e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2670:	9b 84       	ldd	r9, Y+11	; 0x0b
    2672:	aa 84       	ldd	r10, Y+10	; 0x0a
    2674:	b9 84       	ldd	r11, Y+9	; 0x09
    2676:	c8 84       	ldd	r12, Y+8	; 0x08
    2678:	df 80       	ldd	r13, Y+7	; 0x07
    267a:	ee 80       	ldd	r14, Y+6	; 0x06
    267c:	fd 80       	ldd	r15, Y+5	; 0x05
    267e:	0c 81       	ldd	r16, Y+4	; 0x04
    2680:	1b 81       	ldd	r17, Y+3	; 0x03
    2682:	aa 81       	ldd	r26, Y+2	; 0x02
    2684:	b9 81       	ldd	r27, Y+1	; 0x01
    2686:	ce 0f       	add	r28, r30
    2688:	d1 1d       	adc	r29, r1
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	ed 01       	movw	r28, r26
    2696:	08 95       	ret

00002698 <itoa>:
    2698:	fb 01       	movw	r30, r22
    269a:	9f 01       	movw	r18, r30
    269c:	e8 94       	clt
    269e:	42 30       	cpi	r20, 0x02	; 2
    26a0:	c4 f0       	brlt	.+48     	; 0x26d2 <itoa+0x3a>
    26a2:	45 32       	cpi	r20, 0x25	; 37
    26a4:	b4 f4       	brge	.+44     	; 0x26d2 <itoa+0x3a>
    26a6:	4a 30       	cpi	r20, 0x0A	; 10
    26a8:	29 f4       	brne	.+10     	; 0x26b4 <itoa+0x1c>
    26aa:	97 fb       	bst	r25, 7
    26ac:	1e f4       	brtc	.+6      	; 0x26b4 <itoa+0x1c>
    26ae:	90 95       	com	r25
    26b0:	81 95       	neg	r24
    26b2:	9f 4f       	sbci	r25, 0xFF	; 255
    26b4:	64 2f       	mov	r22, r20
    26b6:	77 27       	eor	r23, r23
    26b8:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__udivmodhi4>
    26bc:	80 5d       	subi	r24, 0xD0	; 208
    26be:	8a 33       	cpi	r24, 0x3A	; 58
    26c0:	0c f0       	brlt	.+2      	; 0x26c4 <itoa+0x2c>
    26c2:	89 5d       	subi	r24, 0xD9	; 217
    26c4:	81 93       	st	Z+, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	a1 f7       	brne	.-24     	; 0x26b4 <itoa+0x1c>
    26cc:	16 f4       	brtc	.+4      	; 0x26d2 <itoa+0x3a>
    26ce:	5d e2       	ldi	r21, 0x2D	; 45
    26d0:	51 93       	st	Z+, r21
    26d2:	10 82       	st	Z, r1
    26d4:	c9 01       	movw	r24, r18
    26d6:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <strrev>

000026da <sprintf>:
    26da:	ae e0       	ldi	r26, 0x0E	; 14
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e3 e7       	ldi	r30, 0x73	; 115
    26e0:	f3 e1       	ldi	r31, 0x13	; 19
    26e2:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x1c>
    26e6:	0d 89       	ldd	r16, Y+21	; 0x15
    26e8:	1e 89       	ldd	r17, Y+22	; 0x16
    26ea:	86 e0       	ldi	r24, 0x06	; 6
    26ec:	8c 83       	std	Y+4, r24	; 0x04
    26ee:	1a 83       	std	Y+2, r17	; 0x02
    26f0:	09 83       	std	Y+1, r16	; 0x01
    26f2:	8f ef       	ldi	r24, 0xFF	; 255
    26f4:	9f e7       	ldi	r25, 0x7F	; 127
    26f6:	9e 83       	std	Y+6, r25	; 0x06
    26f8:	8d 83       	std	Y+5, r24	; 0x05
    26fa:	9e 01       	movw	r18, r28
    26fc:	27 5e       	subi	r18, 0xE7	; 231
    26fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2700:	ce 01       	movw	r24, r28
    2702:	01 96       	adiw	r24, 0x01	; 1
    2704:	6f 89       	ldd	r22, Y+23	; 0x17
    2706:	78 8d       	ldd	r23, Y+24	; 0x18
    2708:	a9 01       	movw	r20, r18
    270a:	0e 94 91 13 	call	0x2722	; 0x2722 <vfprintf>
    270e:	2f 81       	ldd	r18, Y+7	; 0x07
    2710:	38 85       	ldd	r19, Y+8	; 0x08
    2712:	02 0f       	add	r16, r18
    2714:	13 1f       	adc	r17, r19
    2716:	f8 01       	movw	r30, r16
    2718:	10 82       	st	Z, r1
    271a:	2e 96       	adiw	r28, 0x0e	; 14
    271c:	e4 e0       	ldi	r30, 0x04	; 4
    271e:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x1c>

00002722 <vfprintf>:
    2722:	ab e0       	ldi	r26, 0x0B	; 11
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e7 e9       	ldi	r30, 0x97	; 151
    2728:	f3 e1       	ldi	r31, 0x13	; 19
    272a:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__>
    272e:	3c 01       	movw	r6, r24
    2730:	2b 01       	movw	r4, r22
    2732:	5a 01       	movw	r10, r20
    2734:	fc 01       	movw	r30, r24
    2736:	17 82       	std	Z+7, r1	; 0x07
    2738:	16 82       	std	Z+6, r1	; 0x06
    273a:	83 81       	ldd	r24, Z+3	; 0x03
    273c:	81 fd       	sbrc	r24, 1
    273e:	03 c0       	rjmp	.+6      	; 0x2746 <vfprintf+0x24>
    2740:	6f ef       	ldi	r22, 0xFF	; 255
    2742:	7f ef       	ldi	r23, 0xFF	; 255
    2744:	c6 c1       	rjmp	.+908    	; 0x2ad2 <vfprintf+0x3b0>
    2746:	9a e0       	ldi	r25, 0x0A	; 10
    2748:	89 2e       	mov	r8, r25
    274a:	1e 01       	movw	r2, r28
    274c:	08 94       	sec
    274e:	21 1c       	adc	r2, r1
    2750:	31 1c       	adc	r3, r1
    2752:	f3 01       	movw	r30, r6
    2754:	23 81       	ldd	r18, Z+3	; 0x03
    2756:	f2 01       	movw	r30, r4
    2758:	23 fd       	sbrc	r18, 3
    275a:	85 91       	lpm	r24, Z+
    275c:	23 ff       	sbrs	r18, 3
    275e:	81 91       	ld	r24, Z+
    2760:	2f 01       	movw	r4, r30
    2762:	88 23       	and	r24, r24
    2764:	09 f4       	brne	.+2      	; 0x2768 <vfprintf+0x46>
    2766:	b2 c1       	rjmp	.+868    	; 0x2acc <vfprintf+0x3aa>
    2768:	85 32       	cpi	r24, 0x25	; 37
    276a:	39 f4       	brne	.+14     	; 0x277a <vfprintf+0x58>
    276c:	23 fd       	sbrc	r18, 3
    276e:	85 91       	lpm	r24, Z+
    2770:	23 ff       	sbrs	r18, 3
    2772:	81 91       	ld	r24, Z+
    2774:	2f 01       	movw	r4, r30
    2776:	85 32       	cpi	r24, 0x25	; 37
    2778:	29 f4       	brne	.+10     	; 0x2784 <vfprintf+0x62>
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	b3 01       	movw	r22, r6
    277e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <fputc>
    2782:	e7 cf       	rjmp	.-50     	; 0x2752 <vfprintf+0x30>
    2784:	98 2f       	mov	r25, r24
    2786:	ff 24       	eor	r15, r15
    2788:	ee 24       	eor	r14, r14
    278a:	99 24       	eor	r9, r9
    278c:	ff e1       	ldi	r31, 0x1F	; 31
    278e:	ff 15       	cp	r31, r15
    2790:	d0 f0       	brcs	.+52     	; 0x27c6 <vfprintf+0xa4>
    2792:	9b 32       	cpi	r25, 0x2B	; 43
    2794:	69 f0       	breq	.+26     	; 0x27b0 <vfprintf+0x8e>
    2796:	9c 32       	cpi	r25, 0x2C	; 44
    2798:	28 f4       	brcc	.+10     	; 0x27a4 <vfprintf+0x82>
    279a:	90 32       	cpi	r25, 0x20	; 32
    279c:	59 f0       	breq	.+22     	; 0x27b4 <vfprintf+0x92>
    279e:	93 32       	cpi	r25, 0x23	; 35
    27a0:	91 f4       	brne	.+36     	; 0x27c6 <vfprintf+0xa4>
    27a2:	0e c0       	rjmp	.+28     	; 0x27c0 <vfprintf+0x9e>
    27a4:	9d 32       	cpi	r25, 0x2D	; 45
    27a6:	49 f0       	breq	.+18     	; 0x27ba <vfprintf+0x98>
    27a8:	90 33       	cpi	r25, 0x30	; 48
    27aa:	69 f4       	brne	.+26     	; 0x27c6 <vfprintf+0xa4>
    27ac:	41 e0       	ldi	r20, 0x01	; 1
    27ae:	24 c0       	rjmp	.+72     	; 0x27f8 <vfprintf+0xd6>
    27b0:	52 e0       	ldi	r21, 0x02	; 2
    27b2:	f5 2a       	or	r15, r21
    27b4:	84 e0       	ldi	r24, 0x04	; 4
    27b6:	f8 2a       	or	r15, r24
    27b8:	28 c0       	rjmp	.+80     	; 0x280a <vfprintf+0xe8>
    27ba:	98 e0       	ldi	r25, 0x08	; 8
    27bc:	f9 2a       	or	r15, r25
    27be:	25 c0       	rjmp	.+74     	; 0x280a <vfprintf+0xe8>
    27c0:	e0 e1       	ldi	r30, 0x10	; 16
    27c2:	fe 2a       	or	r15, r30
    27c4:	22 c0       	rjmp	.+68     	; 0x280a <vfprintf+0xe8>
    27c6:	f7 fc       	sbrc	r15, 7
    27c8:	29 c0       	rjmp	.+82     	; 0x281c <vfprintf+0xfa>
    27ca:	89 2f       	mov	r24, r25
    27cc:	80 53       	subi	r24, 0x30	; 48
    27ce:	8a 30       	cpi	r24, 0x0A	; 10
    27d0:	70 f4       	brcc	.+28     	; 0x27ee <vfprintf+0xcc>
    27d2:	f6 fe       	sbrs	r15, 6
    27d4:	05 c0       	rjmp	.+10     	; 0x27e0 <vfprintf+0xbe>
    27d6:	98 9c       	mul	r9, r8
    27d8:	90 2c       	mov	r9, r0
    27da:	11 24       	eor	r1, r1
    27dc:	98 0e       	add	r9, r24
    27de:	15 c0       	rjmp	.+42     	; 0x280a <vfprintf+0xe8>
    27e0:	e8 9c       	mul	r14, r8
    27e2:	e0 2c       	mov	r14, r0
    27e4:	11 24       	eor	r1, r1
    27e6:	e8 0e       	add	r14, r24
    27e8:	f0 e2       	ldi	r31, 0x20	; 32
    27ea:	ff 2a       	or	r15, r31
    27ec:	0e c0       	rjmp	.+28     	; 0x280a <vfprintf+0xe8>
    27ee:	9e 32       	cpi	r25, 0x2E	; 46
    27f0:	29 f4       	brne	.+10     	; 0x27fc <vfprintf+0xda>
    27f2:	f6 fc       	sbrc	r15, 6
    27f4:	6b c1       	rjmp	.+726    	; 0x2acc <vfprintf+0x3aa>
    27f6:	40 e4       	ldi	r20, 0x40	; 64
    27f8:	f4 2a       	or	r15, r20
    27fa:	07 c0       	rjmp	.+14     	; 0x280a <vfprintf+0xe8>
    27fc:	9c 36       	cpi	r25, 0x6C	; 108
    27fe:	19 f4       	brne	.+6      	; 0x2806 <vfprintf+0xe4>
    2800:	50 e8       	ldi	r21, 0x80	; 128
    2802:	f5 2a       	or	r15, r21
    2804:	02 c0       	rjmp	.+4      	; 0x280a <vfprintf+0xe8>
    2806:	98 36       	cpi	r25, 0x68	; 104
    2808:	49 f4       	brne	.+18     	; 0x281c <vfprintf+0xfa>
    280a:	f2 01       	movw	r30, r4
    280c:	23 fd       	sbrc	r18, 3
    280e:	95 91       	lpm	r25, Z+
    2810:	23 ff       	sbrs	r18, 3
    2812:	91 91       	ld	r25, Z+
    2814:	2f 01       	movw	r4, r30
    2816:	99 23       	and	r25, r25
    2818:	09 f0       	breq	.+2      	; 0x281c <vfprintf+0xfa>
    281a:	b8 cf       	rjmp	.-144    	; 0x278c <vfprintf+0x6a>
    281c:	89 2f       	mov	r24, r25
    281e:	85 54       	subi	r24, 0x45	; 69
    2820:	83 30       	cpi	r24, 0x03	; 3
    2822:	18 f0       	brcs	.+6      	; 0x282a <vfprintf+0x108>
    2824:	80 52       	subi	r24, 0x20	; 32
    2826:	83 30       	cpi	r24, 0x03	; 3
    2828:	38 f4       	brcc	.+14     	; 0x2838 <vfprintf+0x116>
    282a:	44 e0       	ldi	r20, 0x04	; 4
    282c:	50 e0       	ldi	r21, 0x00	; 0
    282e:	a4 0e       	add	r10, r20
    2830:	b5 1e       	adc	r11, r21
    2832:	5f e3       	ldi	r21, 0x3F	; 63
    2834:	59 83       	std	Y+1, r21	; 0x01
    2836:	0f c0       	rjmp	.+30     	; 0x2856 <vfprintf+0x134>
    2838:	93 36       	cpi	r25, 0x63	; 99
    283a:	31 f0       	breq	.+12     	; 0x2848 <vfprintf+0x126>
    283c:	93 37       	cpi	r25, 0x73	; 115
    283e:	79 f0       	breq	.+30     	; 0x285e <vfprintf+0x13c>
    2840:	93 35       	cpi	r25, 0x53	; 83
    2842:	09 f0       	breq	.+2      	; 0x2846 <vfprintf+0x124>
    2844:	56 c0       	rjmp	.+172    	; 0x28f2 <vfprintf+0x1d0>
    2846:	20 c0       	rjmp	.+64     	; 0x2888 <vfprintf+0x166>
    2848:	f5 01       	movw	r30, r10
    284a:	80 81       	ld	r24, Z
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	42 e0       	ldi	r20, 0x02	; 2
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	a4 0e       	add	r10, r20
    2854:	b5 1e       	adc	r11, r21
    2856:	61 01       	movw	r12, r2
    2858:	01 e0       	ldi	r16, 0x01	; 1
    285a:	10 e0       	ldi	r17, 0x00	; 0
    285c:	12 c0       	rjmp	.+36     	; 0x2882 <vfprintf+0x160>
    285e:	f5 01       	movw	r30, r10
    2860:	c0 80       	ld	r12, Z
    2862:	d1 80       	ldd	r13, Z+1	; 0x01
    2864:	f6 fc       	sbrc	r15, 6
    2866:	03 c0       	rjmp	.+6      	; 0x286e <vfprintf+0x14c>
    2868:	6f ef       	ldi	r22, 0xFF	; 255
    286a:	7f ef       	ldi	r23, 0xFF	; 255
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <vfprintf+0x150>
    286e:	69 2d       	mov	r22, r9
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	42 e0       	ldi	r20, 0x02	; 2
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	a4 0e       	add	r10, r20
    2878:	b5 1e       	adc	r11, r21
    287a:	c6 01       	movw	r24, r12
    287c:	0e 94 79 15 	call	0x2af2	; 0x2af2 <strnlen>
    2880:	8c 01       	movw	r16, r24
    2882:	5f e7       	ldi	r21, 0x7F	; 127
    2884:	f5 22       	and	r15, r21
    2886:	14 c0       	rjmp	.+40     	; 0x28b0 <vfprintf+0x18e>
    2888:	f5 01       	movw	r30, r10
    288a:	c0 80       	ld	r12, Z
    288c:	d1 80       	ldd	r13, Z+1	; 0x01
    288e:	f6 fc       	sbrc	r15, 6
    2890:	03 c0       	rjmp	.+6      	; 0x2898 <vfprintf+0x176>
    2892:	6f ef       	ldi	r22, 0xFF	; 255
    2894:	7f ef       	ldi	r23, 0xFF	; 255
    2896:	02 c0       	rjmp	.+4      	; 0x289c <vfprintf+0x17a>
    2898:	69 2d       	mov	r22, r9
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	42 e0       	ldi	r20, 0x02	; 2
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	a4 0e       	add	r10, r20
    28a2:	b5 1e       	adc	r11, r21
    28a4:	c6 01       	movw	r24, r12
    28a6:	0e 94 6e 15 	call	0x2adc	; 0x2adc <strnlen_P>
    28aa:	8c 01       	movw	r16, r24
    28ac:	50 e8       	ldi	r21, 0x80	; 128
    28ae:	f5 2a       	or	r15, r21
    28b0:	f3 fe       	sbrs	r15, 3
    28b2:	07 c0       	rjmp	.+14     	; 0x28c2 <vfprintf+0x1a0>
    28b4:	1a c0       	rjmp	.+52     	; 0x28ea <vfprintf+0x1c8>
    28b6:	80 e2       	ldi	r24, 0x20	; 32
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	b3 01       	movw	r22, r6
    28bc:	0e 94 94 15 	call	0x2b28	; 0x2b28 <fputc>
    28c0:	ea 94       	dec	r14
    28c2:	8e 2d       	mov	r24, r14
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	08 17       	cp	r16, r24
    28c8:	19 07       	cpc	r17, r25
    28ca:	a8 f3       	brcs	.-22     	; 0x28b6 <vfprintf+0x194>
    28cc:	0e c0       	rjmp	.+28     	; 0x28ea <vfprintf+0x1c8>
    28ce:	f6 01       	movw	r30, r12
    28d0:	f7 fc       	sbrc	r15, 7
    28d2:	85 91       	lpm	r24, Z+
    28d4:	f7 fe       	sbrs	r15, 7
    28d6:	81 91       	ld	r24, Z+
    28d8:	6f 01       	movw	r12, r30
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	b3 01       	movw	r22, r6
    28de:	0e 94 94 15 	call	0x2b28	; 0x2b28 <fputc>
    28e2:	e1 10       	cpse	r14, r1
    28e4:	ea 94       	dec	r14
    28e6:	01 50       	subi	r16, 0x01	; 1
    28e8:	10 40       	sbci	r17, 0x00	; 0
    28ea:	01 15       	cp	r16, r1
    28ec:	11 05       	cpc	r17, r1
    28ee:	79 f7       	brne	.-34     	; 0x28ce <vfprintf+0x1ac>
    28f0:	ea c0       	rjmp	.+468    	; 0x2ac6 <vfprintf+0x3a4>
    28f2:	94 36       	cpi	r25, 0x64	; 100
    28f4:	11 f0       	breq	.+4      	; 0x28fa <vfprintf+0x1d8>
    28f6:	99 36       	cpi	r25, 0x69	; 105
    28f8:	69 f5       	brne	.+90     	; 0x2954 <vfprintf+0x232>
    28fa:	f7 fe       	sbrs	r15, 7
    28fc:	08 c0       	rjmp	.+16     	; 0x290e <vfprintf+0x1ec>
    28fe:	f5 01       	movw	r30, r10
    2900:	20 81       	ld	r18, Z
    2902:	31 81       	ldd	r19, Z+1	; 0x01
    2904:	42 81       	ldd	r20, Z+2	; 0x02
    2906:	53 81       	ldd	r21, Z+3	; 0x03
    2908:	84 e0       	ldi	r24, 0x04	; 4
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	0a c0       	rjmp	.+20     	; 0x2922 <vfprintf+0x200>
    290e:	f5 01       	movw	r30, r10
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	9c 01       	movw	r18, r24
    2916:	44 27       	eor	r20, r20
    2918:	37 fd       	sbrc	r19, 7
    291a:	40 95       	com	r20
    291c:	54 2f       	mov	r21, r20
    291e:	82 e0       	ldi	r24, 0x02	; 2
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	a8 0e       	add	r10, r24
    2924:	b9 1e       	adc	r11, r25
    2926:	9f e6       	ldi	r25, 0x6F	; 111
    2928:	f9 22       	and	r15, r25
    292a:	57 ff       	sbrs	r21, 7
    292c:	09 c0       	rjmp	.+18     	; 0x2940 <vfprintf+0x21e>
    292e:	50 95       	com	r21
    2930:	40 95       	com	r20
    2932:	30 95       	com	r19
    2934:	21 95       	neg	r18
    2936:	3f 4f       	sbci	r19, 0xFF	; 255
    2938:	4f 4f       	sbci	r20, 0xFF	; 255
    293a:	5f 4f       	sbci	r21, 0xFF	; 255
    293c:	e0 e8       	ldi	r30, 0x80	; 128
    293e:	fe 2a       	or	r15, r30
    2940:	ca 01       	movw	r24, r20
    2942:	b9 01       	movw	r22, r18
    2944:	a1 01       	movw	r20, r2
    2946:	2a e0       	ldi	r18, 0x0A	; 10
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__ultoa_invert>
    294e:	d8 2e       	mov	r13, r24
    2950:	d2 18       	sub	r13, r2
    2952:	40 c0       	rjmp	.+128    	; 0x29d4 <vfprintf+0x2b2>
    2954:	95 37       	cpi	r25, 0x75	; 117
    2956:	29 f4       	brne	.+10     	; 0x2962 <vfprintf+0x240>
    2958:	1f 2d       	mov	r17, r15
    295a:	1f 7e       	andi	r17, 0xEF	; 239
    295c:	2a e0       	ldi	r18, 0x0A	; 10
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	1d c0       	rjmp	.+58     	; 0x299c <vfprintf+0x27a>
    2962:	1f 2d       	mov	r17, r15
    2964:	19 7f       	andi	r17, 0xF9	; 249
    2966:	9f 36       	cpi	r25, 0x6F	; 111
    2968:	61 f0       	breq	.+24     	; 0x2982 <vfprintf+0x260>
    296a:	90 37       	cpi	r25, 0x70	; 112
    296c:	20 f4       	brcc	.+8      	; 0x2976 <vfprintf+0x254>
    296e:	98 35       	cpi	r25, 0x58	; 88
    2970:	09 f0       	breq	.+2      	; 0x2974 <vfprintf+0x252>
    2972:	ac c0       	rjmp	.+344    	; 0x2acc <vfprintf+0x3aa>
    2974:	0f c0       	rjmp	.+30     	; 0x2994 <vfprintf+0x272>
    2976:	90 37       	cpi	r25, 0x70	; 112
    2978:	39 f0       	breq	.+14     	; 0x2988 <vfprintf+0x266>
    297a:	98 37       	cpi	r25, 0x78	; 120
    297c:	09 f0       	breq	.+2      	; 0x2980 <vfprintf+0x25e>
    297e:	a6 c0       	rjmp	.+332    	; 0x2acc <vfprintf+0x3aa>
    2980:	04 c0       	rjmp	.+8      	; 0x298a <vfprintf+0x268>
    2982:	28 e0       	ldi	r18, 0x08	; 8
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	0a c0       	rjmp	.+20     	; 0x299c <vfprintf+0x27a>
    2988:	10 61       	ori	r17, 0x10	; 16
    298a:	14 fd       	sbrc	r17, 4
    298c:	14 60       	ori	r17, 0x04	; 4
    298e:	20 e1       	ldi	r18, 0x10	; 16
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	04 c0       	rjmp	.+8      	; 0x299c <vfprintf+0x27a>
    2994:	14 fd       	sbrc	r17, 4
    2996:	16 60       	ori	r17, 0x06	; 6
    2998:	20 e1       	ldi	r18, 0x10	; 16
    299a:	32 e0       	ldi	r19, 0x02	; 2
    299c:	17 ff       	sbrs	r17, 7
    299e:	08 c0       	rjmp	.+16     	; 0x29b0 <vfprintf+0x28e>
    29a0:	f5 01       	movw	r30, r10
    29a2:	60 81       	ld	r22, Z
    29a4:	71 81       	ldd	r23, Z+1	; 0x01
    29a6:	82 81       	ldd	r24, Z+2	; 0x02
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	44 e0       	ldi	r20, 0x04	; 4
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	08 c0       	rjmp	.+16     	; 0x29c0 <vfprintf+0x29e>
    29b0:	f5 01       	movw	r30, r10
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	bc 01       	movw	r22, r24
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	42 e0       	ldi	r20, 0x02	; 2
    29be:	50 e0       	ldi	r21, 0x00	; 0
    29c0:	a4 0e       	add	r10, r20
    29c2:	b5 1e       	adc	r11, r21
    29c4:	a1 01       	movw	r20, r2
    29c6:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__ultoa_invert>
    29ca:	d8 2e       	mov	r13, r24
    29cc:	d2 18       	sub	r13, r2
    29ce:	8f e7       	ldi	r24, 0x7F	; 127
    29d0:	f8 2e       	mov	r15, r24
    29d2:	f1 22       	and	r15, r17
    29d4:	f6 fe       	sbrs	r15, 6
    29d6:	0b c0       	rjmp	.+22     	; 0x29ee <vfprintf+0x2cc>
    29d8:	5e ef       	ldi	r21, 0xFE	; 254
    29da:	f5 22       	and	r15, r21
    29dc:	d9 14       	cp	r13, r9
    29de:	38 f4       	brcc	.+14     	; 0x29ee <vfprintf+0x2cc>
    29e0:	f4 fe       	sbrs	r15, 4
    29e2:	07 c0       	rjmp	.+14     	; 0x29f2 <vfprintf+0x2d0>
    29e4:	f2 fc       	sbrc	r15, 2
    29e6:	05 c0       	rjmp	.+10     	; 0x29f2 <vfprintf+0x2d0>
    29e8:	8f ee       	ldi	r24, 0xEF	; 239
    29ea:	f8 22       	and	r15, r24
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <vfprintf+0x2d0>
    29ee:	1d 2d       	mov	r17, r13
    29f0:	01 c0       	rjmp	.+2      	; 0x29f4 <vfprintf+0x2d2>
    29f2:	19 2d       	mov	r17, r9
    29f4:	f4 fe       	sbrs	r15, 4
    29f6:	0d c0       	rjmp	.+26     	; 0x2a12 <vfprintf+0x2f0>
    29f8:	fe 01       	movw	r30, r28
    29fa:	ed 0d       	add	r30, r13
    29fc:	f1 1d       	adc	r31, r1
    29fe:	80 81       	ld	r24, Z
    2a00:	80 33       	cpi	r24, 0x30	; 48
    2a02:	19 f4       	brne	.+6      	; 0x2a0a <vfprintf+0x2e8>
    2a04:	99 ee       	ldi	r25, 0xE9	; 233
    2a06:	f9 22       	and	r15, r25
    2a08:	08 c0       	rjmp	.+16     	; 0x2a1a <vfprintf+0x2f8>
    2a0a:	1f 5f       	subi	r17, 0xFF	; 255
    2a0c:	f2 fe       	sbrs	r15, 2
    2a0e:	05 c0       	rjmp	.+10     	; 0x2a1a <vfprintf+0x2f8>
    2a10:	03 c0       	rjmp	.+6      	; 0x2a18 <vfprintf+0x2f6>
    2a12:	8f 2d       	mov	r24, r15
    2a14:	86 78       	andi	r24, 0x86	; 134
    2a16:	09 f0       	breq	.+2      	; 0x2a1a <vfprintf+0x2f8>
    2a18:	1f 5f       	subi	r17, 0xFF	; 255
    2a1a:	0f 2d       	mov	r16, r15
    2a1c:	f3 fc       	sbrc	r15, 3
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <vfprintf+0x326>
    2a20:	f0 fe       	sbrs	r15, 0
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <vfprintf+0x320>
    2a24:	1e 15       	cp	r17, r14
    2a26:	10 f0       	brcs	.+4      	; 0x2a2c <vfprintf+0x30a>
    2a28:	9d 2c       	mov	r9, r13
    2a2a:	0b c0       	rjmp	.+22     	; 0x2a42 <vfprintf+0x320>
    2a2c:	9d 2c       	mov	r9, r13
    2a2e:	9e 0c       	add	r9, r14
    2a30:	91 1a       	sub	r9, r17
    2a32:	1e 2d       	mov	r17, r14
    2a34:	06 c0       	rjmp	.+12     	; 0x2a42 <vfprintf+0x320>
    2a36:	80 e2       	ldi	r24, 0x20	; 32
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	b3 01       	movw	r22, r6
    2a3c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <fputc>
    2a40:	1f 5f       	subi	r17, 0xFF	; 255
    2a42:	1e 15       	cp	r17, r14
    2a44:	c0 f3       	brcs	.-16     	; 0x2a36 <vfprintf+0x314>
    2a46:	04 c0       	rjmp	.+8      	; 0x2a50 <vfprintf+0x32e>
    2a48:	1e 15       	cp	r17, r14
    2a4a:	10 f4       	brcc	.+4      	; 0x2a50 <vfprintf+0x32e>
    2a4c:	e1 1a       	sub	r14, r17
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <vfprintf+0x330>
    2a50:	ee 24       	eor	r14, r14
    2a52:	04 ff       	sbrs	r16, 4
    2a54:	0f c0       	rjmp	.+30     	; 0x2a74 <vfprintf+0x352>
    2a56:	80 e3       	ldi	r24, 0x30	; 48
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	b3 01       	movw	r22, r6
    2a5c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <fputc>
    2a60:	02 ff       	sbrs	r16, 2
    2a62:	1d c0       	rjmp	.+58     	; 0x2a9e <vfprintf+0x37c>
    2a64:	01 fd       	sbrc	r16, 1
    2a66:	03 c0       	rjmp	.+6      	; 0x2a6e <vfprintf+0x34c>
    2a68:	88 e7       	ldi	r24, 0x78	; 120
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e c0       	rjmp	.+28     	; 0x2a8a <vfprintf+0x368>
    2a6e:	88 e5       	ldi	r24, 0x58	; 88
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	0b c0       	rjmp	.+22     	; 0x2a8a <vfprintf+0x368>
    2a74:	80 2f       	mov	r24, r16
    2a76:	86 78       	andi	r24, 0x86	; 134
    2a78:	91 f0       	breq	.+36     	; 0x2a9e <vfprintf+0x37c>
    2a7a:	01 ff       	sbrs	r16, 1
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <vfprintf+0x360>
    2a7e:	8b e2       	ldi	r24, 0x2B	; 43
    2a80:	01 c0       	rjmp	.+2      	; 0x2a84 <vfprintf+0x362>
    2a82:	80 e2       	ldi	r24, 0x20	; 32
    2a84:	f7 fc       	sbrc	r15, 7
    2a86:	8d e2       	ldi	r24, 0x2D	; 45
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	b3 01       	movw	r22, r6
    2a8c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <fputc>
    2a90:	06 c0       	rjmp	.+12     	; 0x2a9e <vfprintf+0x37c>
    2a92:	80 e3       	ldi	r24, 0x30	; 48
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	b3 01       	movw	r22, r6
    2a98:	0e 94 94 15 	call	0x2b28	; 0x2b28 <fputc>
    2a9c:	9a 94       	dec	r9
    2a9e:	d9 14       	cp	r13, r9
    2aa0:	c0 f3       	brcs	.-16     	; 0x2a92 <vfprintf+0x370>
    2aa2:	da 94       	dec	r13
    2aa4:	f1 01       	movw	r30, r2
    2aa6:	ed 0d       	add	r30, r13
    2aa8:	f1 1d       	adc	r31, r1
    2aaa:	80 81       	ld	r24, Z
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	b3 01       	movw	r22, r6
    2ab0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <fputc>
    2ab4:	dd 20       	and	r13, r13
    2ab6:	a9 f7       	brne	.-22     	; 0x2aa2 <vfprintf+0x380>
    2ab8:	06 c0       	rjmp	.+12     	; 0x2ac6 <vfprintf+0x3a4>
    2aba:	80 e2       	ldi	r24, 0x20	; 32
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	b3 01       	movw	r22, r6
    2ac0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <fputc>
    2ac4:	ea 94       	dec	r14
    2ac6:	ee 20       	and	r14, r14
    2ac8:	c1 f7       	brne	.-16     	; 0x2aba <vfprintf+0x398>
    2aca:	43 ce       	rjmp	.-890    	; 0x2752 <vfprintf+0x30>
    2acc:	f3 01       	movw	r30, r6
    2ace:	66 81       	ldd	r22, Z+6	; 0x06
    2ad0:	77 81       	ldd	r23, Z+7	; 0x07
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	2b 96       	adiw	r28, 0x0b	; 11
    2ad6:	e2 e1       	ldi	r30, 0x12	; 18
    2ad8:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__>

00002adc <strnlen_P>:
    2adc:	fc 01       	movw	r30, r24
    2ade:	05 90       	lpm	r0, Z+
    2ae0:	61 50       	subi	r22, 0x01	; 1
    2ae2:	70 40       	sbci	r23, 0x00	; 0
    2ae4:	01 10       	cpse	r0, r1
    2ae6:	d8 f7       	brcc	.-10     	; 0x2ade <strnlen_P+0x2>
    2ae8:	80 95       	com	r24
    2aea:	90 95       	com	r25
    2aec:	8e 0f       	add	r24, r30
    2aee:	9f 1f       	adc	r25, r31
    2af0:	08 95       	ret

00002af2 <strnlen>:
    2af2:	fc 01       	movw	r30, r24
    2af4:	61 50       	subi	r22, 0x01	; 1
    2af6:	70 40       	sbci	r23, 0x00	; 0
    2af8:	01 90       	ld	r0, Z+
    2afa:	01 10       	cpse	r0, r1
    2afc:	d8 f7       	brcc	.-10     	; 0x2af4 <strnlen+0x2>
    2afe:	80 95       	com	r24
    2b00:	90 95       	com	r25
    2b02:	8e 0f       	add	r24, r30
    2b04:	9f 1f       	adc	r25, r31
    2b06:	08 95       	ret

00002b08 <strrev>:
    2b08:	dc 01       	movw	r26, r24
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	67 2f       	mov	r22, r23
    2b0e:	71 91       	ld	r23, Z+
    2b10:	77 23       	and	r23, r23
    2b12:	e1 f7       	brne	.-8      	; 0x2b0c <strrev+0x4>
    2b14:	32 97       	sbiw	r30, 0x02	; 2
    2b16:	04 c0       	rjmp	.+8      	; 0x2b20 <strrev+0x18>
    2b18:	7c 91       	ld	r23, X
    2b1a:	6d 93       	st	X+, r22
    2b1c:	70 83       	st	Z, r23
    2b1e:	62 91       	ld	r22, -Z
    2b20:	ae 17       	cp	r26, r30
    2b22:	bf 07       	cpc	r27, r31
    2b24:	c8 f3       	brcs	.-14     	; 0x2b18 <strrev+0x10>
    2b26:	08 95       	ret

00002b28 <fputc>:
    2b28:	0f 93       	push	r16
    2b2a:	1f 93       	push	r17
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	8c 01       	movw	r16, r24
    2b32:	eb 01       	movw	r28, r22
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	81 ff       	sbrs	r24, 1
    2b38:	1b c0       	rjmp	.+54     	; 0x2b70 <fputc+0x48>
    2b3a:	82 ff       	sbrs	r24, 2
    2b3c:	0d c0       	rjmp	.+26     	; 0x2b58 <fputc+0x30>
    2b3e:	2e 81       	ldd	r18, Y+6	; 0x06
    2b40:	3f 81       	ldd	r19, Y+7	; 0x07
    2b42:	8c 81       	ldd	r24, Y+4	; 0x04
    2b44:	9d 81       	ldd	r25, Y+5	; 0x05
    2b46:	28 17       	cp	r18, r24
    2b48:	39 07       	cpc	r19, r25
    2b4a:	64 f4       	brge	.+24     	; 0x2b64 <fputc+0x3c>
    2b4c:	e8 81       	ld	r30, Y
    2b4e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b50:	01 93       	st	Z+, r16
    2b52:	f9 83       	std	Y+1, r31	; 0x01
    2b54:	e8 83       	st	Y, r30
    2b56:	06 c0       	rjmp	.+12     	; 0x2b64 <fputc+0x3c>
    2b58:	e8 85       	ldd	r30, Y+8	; 0x08
    2b5a:	f9 85       	ldd	r31, Y+9	; 0x09
    2b5c:	80 2f       	mov	r24, r16
    2b5e:	09 95       	icall
    2b60:	89 2b       	or	r24, r25
    2b62:	31 f4       	brne	.+12     	; 0x2b70 <fputc+0x48>
    2b64:	8e 81       	ldd	r24, Y+6	; 0x06
    2b66:	9f 81       	ldd	r25, Y+7	; 0x07
    2b68:	01 96       	adiw	r24, 0x01	; 1
    2b6a:	9f 83       	std	Y+7, r25	; 0x07
    2b6c:	8e 83       	std	Y+6, r24	; 0x06
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <fputc+0x4c>
    2b70:	0f ef       	ldi	r16, 0xFF	; 255
    2b72:	1f ef       	ldi	r17, 0xFF	; 255
    2b74:	c8 01       	movw	r24, r16
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	08 95       	ret

00002b80 <__ultoa_invert>:
    2b80:	fa 01       	movw	r30, r20
    2b82:	aa 27       	eor	r26, r26
    2b84:	28 30       	cpi	r18, 0x08	; 8
    2b86:	51 f1       	breq	.+84     	; 0x2bdc <__ultoa_invert+0x5c>
    2b88:	20 31       	cpi	r18, 0x10	; 16
    2b8a:	81 f1       	breq	.+96     	; 0x2bec <__ultoa_invert+0x6c>
    2b8c:	e8 94       	clt
    2b8e:	6f 93       	push	r22
    2b90:	6e 7f       	andi	r22, 0xFE	; 254
    2b92:	6e 5f       	subi	r22, 0xFE	; 254
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	8f 4f       	sbci	r24, 0xFF	; 255
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	af 4f       	sbci	r26, 0xFF	; 255
    2b9c:	b1 e0       	ldi	r27, 0x01	; 1
    2b9e:	3e d0       	rcall	.+124    	; 0x2c1c <__ultoa_invert+0x9c>
    2ba0:	b4 e0       	ldi	r27, 0x04	; 4
    2ba2:	3c d0       	rcall	.+120    	; 0x2c1c <__ultoa_invert+0x9c>
    2ba4:	67 0f       	add	r22, r23
    2ba6:	78 1f       	adc	r23, r24
    2ba8:	89 1f       	adc	r24, r25
    2baa:	9a 1f       	adc	r25, r26
    2bac:	a1 1d       	adc	r26, r1
    2bae:	68 0f       	add	r22, r24
    2bb0:	79 1f       	adc	r23, r25
    2bb2:	8a 1f       	adc	r24, r26
    2bb4:	91 1d       	adc	r25, r1
    2bb6:	a1 1d       	adc	r26, r1
    2bb8:	6a 0f       	add	r22, r26
    2bba:	71 1d       	adc	r23, r1
    2bbc:	81 1d       	adc	r24, r1
    2bbe:	91 1d       	adc	r25, r1
    2bc0:	a1 1d       	adc	r26, r1
    2bc2:	20 d0       	rcall	.+64     	; 0x2c04 <__ultoa_invert+0x84>
    2bc4:	09 f4       	brne	.+2      	; 0x2bc8 <__ultoa_invert+0x48>
    2bc6:	68 94       	set
    2bc8:	3f 91       	pop	r19
    2bca:	2a e0       	ldi	r18, 0x0A	; 10
    2bcc:	26 9f       	mul	r18, r22
    2bce:	11 24       	eor	r1, r1
    2bd0:	30 19       	sub	r19, r0
    2bd2:	30 5d       	subi	r19, 0xD0	; 208
    2bd4:	31 93       	st	Z+, r19
    2bd6:	de f6       	brtc	.-74     	; 0x2b8e <__ultoa_invert+0xe>
    2bd8:	cf 01       	movw	r24, r30
    2bda:	08 95       	ret
    2bdc:	46 2f       	mov	r20, r22
    2bde:	47 70       	andi	r20, 0x07	; 7
    2be0:	40 5d       	subi	r20, 0xD0	; 208
    2be2:	41 93       	st	Z+, r20
    2be4:	b3 e0       	ldi	r27, 0x03	; 3
    2be6:	0f d0       	rcall	.+30     	; 0x2c06 <__ultoa_invert+0x86>
    2be8:	c9 f7       	brne	.-14     	; 0x2bdc <__ultoa_invert+0x5c>
    2bea:	f6 cf       	rjmp	.-20     	; 0x2bd8 <__ultoa_invert+0x58>
    2bec:	46 2f       	mov	r20, r22
    2bee:	4f 70       	andi	r20, 0x0F	; 15
    2bf0:	40 5d       	subi	r20, 0xD0	; 208
    2bf2:	4a 33       	cpi	r20, 0x3A	; 58
    2bf4:	18 f0       	brcs	.+6      	; 0x2bfc <__ultoa_invert+0x7c>
    2bf6:	49 5d       	subi	r20, 0xD9	; 217
    2bf8:	31 fd       	sbrc	r19, 1
    2bfa:	40 52       	subi	r20, 0x20	; 32
    2bfc:	41 93       	st	Z+, r20
    2bfe:	02 d0       	rcall	.+4      	; 0x2c04 <__ultoa_invert+0x84>
    2c00:	a9 f7       	brne	.-22     	; 0x2bec <__ultoa_invert+0x6c>
    2c02:	ea cf       	rjmp	.-44     	; 0x2bd8 <__ultoa_invert+0x58>
    2c04:	b4 e0       	ldi	r27, 0x04	; 4
    2c06:	a6 95       	lsr	r26
    2c08:	97 95       	ror	r25
    2c0a:	87 95       	ror	r24
    2c0c:	77 95       	ror	r23
    2c0e:	67 95       	ror	r22
    2c10:	ba 95       	dec	r27
    2c12:	c9 f7       	brne	.-14     	; 0x2c06 <__ultoa_invert+0x86>
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	61 05       	cpc	r22, r1
    2c18:	71 05       	cpc	r23, r1
    2c1a:	08 95       	ret
    2c1c:	9b 01       	movw	r18, r22
    2c1e:	ac 01       	movw	r20, r24
    2c20:	0a 2e       	mov	r0, r26
    2c22:	06 94       	lsr	r0
    2c24:	57 95       	ror	r21
    2c26:	47 95       	ror	r20
    2c28:	37 95       	ror	r19
    2c2a:	27 95       	ror	r18
    2c2c:	ba 95       	dec	r27
    2c2e:	c9 f7       	brne	.-14     	; 0x2c22 <__ultoa_invert+0xa2>
    2c30:	62 0f       	add	r22, r18
    2c32:	73 1f       	adc	r23, r19
    2c34:	84 1f       	adc	r24, r20
    2c36:	95 1f       	adc	r25, r21
    2c38:	a0 1d       	adc	r26, r0
    2c3a:	08 95       	ret

00002c3c <__udivmodhi4>:
    2c3c:	aa 1b       	sub	r26, r26
    2c3e:	bb 1b       	sub	r27, r27
    2c40:	51 e1       	ldi	r21, 0x11	; 17
    2c42:	07 c0       	rjmp	.+14     	; 0x2c52 <__udivmodhi4_ep>

00002c44 <__udivmodhi4_loop>:
    2c44:	aa 1f       	adc	r26, r26
    2c46:	bb 1f       	adc	r27, r27
    2c48:	a6 17       	cp	r26, r22
    2c4a:	b7 07       	cpc	r27, r23
    2c4c:	10 f0       	brcs	.+4      	; 0x2c52 <__udivmodhi4_ep>
    2c4e:	a6 1b       	sub	r26, r22
    2c50:	b7 0b       	sbc	r27, r23

00002c52 <__udivmodhi4_ep>:
    2c52:	88 1f       	adc	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	5a 95       	dec	r21
    2c58:	a9 f7       	brne	.-22     	; 0x2c44 <__udivmodhi4_loop>
    2c5a:	80 95       	com	r24
    2c5c:	90 95       	com	r25
    2c5e:	bc 01       	movw	r22, r24
    2c60:	cd 01       	movw	r24, r26
    2c62:	08 95       	ret

00002c64 <_exit>:
    2c64:	f8 94       	cli

00002c66 <__stop_program>:
    2c66:	ff cf       	rjmp	.-2      	; 0x2c66 <__stop_program>
